#include "include/funcDefs.h"
#include "include/global_func_table.h"
#include <stdlib.h>

void UpdateCurrentPosition()
{
__asm__
(
	" \n " //!; Source: forgedalliance_exxt.exe (base 0x00400000 - 4194304)
	" \n " //!; Internal calls outside selected range (before)
	"_0x5AE210 =  5960208 \n " 
	"_0x5ADFE0 =  5959648 \n " 
	"_0x5AD830 =  5957680 \n " 
	"edx =  4096 \n " 
	"_0x5AD370 =  5956464 \n " 
	"_0x5AE170 =  5960048 \n " 
	"_0x57D4F0 =  5760240 \n " 
	"_0x579300 =  5743360 \n " 
	"_0x4F0A50 =  5184080 \n " 
	"_0x5A9CF0 =  5942512 \n " 
	"_0x5AD130 =  5955888 \n "
	"_0x746280 =  7631488 \n " 
	"_0x8E5870 =  9332848 \n " 
	"_0x5AEC70 =  5962864 \n " 
	"_0x5AF5B0 =  5965232 \n " 
	"_0x678880 =  6789248 \n " 
	"_0x7209E0 =  7477728 \n " 
	"_0x62A990 =  6470032 \n " 
	"_0x5AF4E0 =  5965024 \n " 
	"_0x5AF670 =  5965424 \n " 
	"_0x6A9720 =  6989600 \n " 
	"_0x62CA60 =  6478432 \n " 
	"_0x5AFEC0 =  5967552 \n " 
	"_0x5AF7E0 =  5965792 \n " 
	"_0x62ABA0 =  6470560 \n " 	
	" \n " //!; Start of selected range: 0x005AE2D0
	"push ebp \n " 
	"mov ebp,esp \n " 
	"and esp,0xFFFFFFF8 \n " 
	"sub esp,0x30 \n " 
	"mov eax,dword ptr [ebx+0x10] \n " 
	"mov eax,dword ptr [eax+0x18] \n " 
	"mov eax,dword ptr [eax+0x70] \n " 
	"push esi \n " 
	"push edi \n " 
	//"push eax \n " 
	//"mov eax,dword ptr [ebx+0x58] \n " 
	//"push 0xE1C524 \n " 
	//"call _0x746280 \n " 
	//"mov eax,dword ptr [ebx+0x10] \n " 
	//"mov eax,dword ptr [eax+0x18] \n " 
	//"mov eax,dword ptr [eax+0x70] \n " 
	//"add esp,0x8 \n " 
	"mov dword ptr [esp+0x24],eax \n " 
	"mov eax,dword ptr [ebx+0x58] \n " 
	"push 0x4 \n " 
	"lea ecx,dword ptr [esp+0x28] \n " 
	"push ecx \n " 
	"lea ecx,dword ptr [eax+0x50] \n " 
	"call _0x8E5870 \n " 
	"mov edx,dword ptr [ebp+0x8] \n " 
	"mov esi,ebx \n " 
	"call _0x5AE210 \n " 
	"mov edx,dword ptr [ebx+0x58] \n " 
	"mov ecx,dword ptr [edx+0x900] \n " 
	"mov eax,0x24924925 \n " 
	"mul ecx \n " 
	"mov eax,ecx \n " 
	"sub eax,edx \n " 
	"shr eax,0x1 \n " 
	"add eax,edx \n " 
	"shr eax,0x2 \n " 
	"lea edx,dword ptr [eax*0x8] \n " 
	"sub edx,eax \n " 
	"mov edi,ecx \n " 
	"sub edi,edx \n " 
	"mov eax,0x4EC4EC4F \n " 
	"mul ecx \n " 
	"mov eax,dword ptr [ebx+0x9C] \n " 
	"shr edx,0x2 \n " 
	"imul edx,edx,0xD \n " 
	"mov dword ptr [esp+0x18],ecx \n " 
	"sub ecx,edx \n " 
	"test eax,eax \n " 
	"mov dword ptr [esp+0x20],ecx \n " 
	"jle L0xABEL_0x005AE38D  \n " //!; => 0x005AE38D
	"add eax,0xFFFFFFFF \n " 
	"mov dword ptr [ebx+0x9C],eax \n " 
	"jne L0xABEL_0x005AE37F  \n " //!; => 0x005AE37F
	"mov eax,dword ptr [ebx+0x98] \n " 
	"push eax \n " 
	"push ebx \n " 
	"call _0x5ADFE0 \n " 
	"L0xABEL_0x005AE37F: \n " 
	"mov ecx,dword ptr [ebx+0x24] \n " 
	"mov dword ptr [ebx+0x28],ecx \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AE38D: \n " 
	"mov eax,dword ptr [ebx+0x64] \n " 
	"test eax,eax \n " 
	"jle L0xABEL_0x005AE3B0  \n " //!; => 0x005AE3B0
	"add eax,0xFFFFFFFF \n " 
	"mov dword ptr [ebx+0x64],eax \n " 
	"jne L0xABEL_0x005AE4DF  \n " //!; => 0x005AE4DF
	"push 0x2 \n " 
	"call _0x5AEC70 \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"nop  \n " 
	"L0xABEL_0x005AE3B0: \n " 
	"mov ecx,dword ptr [ebx+0x18] \n " 
	"test ecx,ecx \n " 
	"je L0xABEL_0x005AE46A  \n " //!; => 0x005AE46A
	"mov eax,dword ptr [ebx+0x1C] \n " 
	"sub eax,ecx \n " 
	"sar eax,0x2 \n " 
	"cmp eax,0x2 \n " 
	"jb L0xABEL_0x005AE46A  \n " //!; => 0x005AE46A
	"movzx eax,word ptr [ecx] \n " 
	"movzx edx,word ptr [ebx+0x24] \n " 
	"movzx eax,ax \n " 
	"movzx edx,dx \n " 
	"sub eax,edx \n " 
	"movzx edx,word ptr [ebx+0x26] \n " 
	"mov dword ptr [esp+0x24],eax \n " 
	"movzx eax,word ptr [ecx+0x2] \n " 
	"fild dword ptr [esp+0x24] \n " 
	"movzx eax,ax \n " 
	"movzx edx,dx \n " 
	"sub eax,edx \n " 
	"movzx edx,word ptr [ebx+0x24] \n " 
	"mov dword ptr [esp+0x1C],eax \n " 
	"movzx eax,word ptr [ecx+0x4] \n " 
	"fild dword ptr [esp+0x1C] \n " 
	"movzx eax,ax \n " 
	"fmul st(0) \n " 
	"fld st(1) \n " 
	"fmulp st(2),st(0) \n " 
	"movzx edx,dx \n " 
	"sub eax,edx \n " 
	"faddp st(1),st(0) \n " 
	"movzx edx,word ptr [ebx+0x26] \n " 
	"fsqrt  \n " 
	"mov dword ptr [esp+0x24],eax \n " 
	"movzx eax,word ptr [ecx+0x6] \n " 
	"movzx edx,dx \n " 
	"movzx eax,ax \n " 
	"sub eax,edx \n " 
	"mov dword ptr [esp+0x1C],eax \n " 
	"fild dword ptr [esp+0x24] \n " 
	"fild dword ptr [esp+0x1C] \n " 
	"fmul st(0) \n " 
	"fld st(1) \n " 
	"fmulp st(2),st(0) \n " 
	"faddp st(1),st(0) \n " 
	"fsqrt  \n " 
	"fxch st(1) \n " 
	"fcomip st(1) \n " 
	"fstp st(0) \n " 
	"jb L0xABEL_0x005AE46A  \n " //!; => 0x005AE46A
	"push ecx \n " 
	"mov ecx,dword ptr [ecx+0x4] \n " 
	"mov eax,esp \n " 
	"push ebx \n " 
	"mov dword ptr [eax],ecx \n " 
	"call _0x5AF5B0 \n " 
	"test al,al \n " 
	"je L0xABEL_0x005AE46A  \n " //!; => 0x005AE46A
	"mov eax,0x1 \n " 
	"mov ecx,ebx \n " 
	"call _0x5AD830 \n " 
	"jmp L0xABEL_0x005AE3B0  \n " //!; => 0x005AE3B0
	"L0xABEL_0x005AE46A: \n " 
	"mov eax,dword ptr [ebx+0xC] \n " 
	"cmp eax,0x5 \n " 
	"je L0xABEL_0x005AE485  \n " //!; => 0x005AE485
	"cmp eax,0x6 \n " 
	"je L0xABEL_0x005AE485  \n " //!; => 0x005AE485
	"mov edx,dword ptr [ebx+0x24] \n " 
	"mov dword ptr [ebx+0x28],edx \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AE485: \n " 
	"mov ecx,dword ptr [ebx+0x1C] \n " 
	"mov eax,dword ptr [ebx+0x24] \n " 
	"cmp eax,dword ptr [ecx-0x4] \n " 
	"lea esi,dword ptr [ebx+0x24] \n " 
	"jne L0xABEL_0x005AE4A6  \n " //!; => 0x005AE4A6
	"xor ecx,ecx \n " 
	"mov dword ptr [ebx+0xC],ecx \n " 
	"mov dword ptr [ebx+0x28],eax \n " 
	"mov dword ptr [ebx+0x64],ecx \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AE4A6: \n " 
	"mov eax,dword ptr [ebx+0x10] \n " 
	"mov ecx,dword ptr [eax+0x18] \n " 
	"mov eax,dword ptr [ecx] \n " 
	"mov edx,dword ptr [eax+0x1C] \n " 
	"call edx \n " 
	"add eax,0x278 \n " 
	"cmp dword ptr [eax+0x18],0x5 \n " 
	"mov dword ptr [esp+0x28],eax \n " 
	"jne L0xABEL_0x005AE4E7  \n " //!; => 0x005AE4E7
	"mov eax,dword ptr [ebx+0x10] \n " 
	"mov eax,dword ptr [eax+0x18] \n " 
	"mov eax,dword ptr [eax+0x120] \n " 
	"cmp dword ptr [ebx+0x54],eax \n " 
	"je L0xABEL_0x005AE4E7  \n " //!; => 0x005AE4E7
	"mov dword ptr [ebx+0x54],eax \n " 
	"L0xABEL_0x005AE4D6: \n " 
	"mov esi,ebx \n " 
	"push 0x2 \n " 
	"call _0x5AEC70 \n " 
	"L0xABEL_0x005AE4DF: \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AE4E7: \n " 
	"cmp byte ptr [ebx+0x94],0x0 \n " 
	"mov ecx,esi \n " 
	"setne al \n " 
	"test al,al \n " 
	"mov byte ptr [esp+0xE],al \n " 
	"lea eax,dword ptr [ebx+0x28] \n " 
	"sete byte ptr [esp+0xF] \n " 
	"call _0x5AD370 \n " 
	"fstp dword ptr [esp+0x24] \n " 
	"mov eax,dword ptr [eax] \n " 
	"cmp dword ptr [esi],eax \n " 
	"je L0xABEL_0x005AE63A  \n " //!; => 0x005AE63A
	"cmp byte ptr [ebx+0x91],0x0 \n " 
	"jne L0xABEL_0x005AE63A  \n " //!; => 0x005AE63A
	"cmp byte ptr [ebx+0x96],0x0 \n " 
	"jne L0xABEL_0x005AE63A  \n " //!; => 0x005AE63A
	"cmp byte ptr [esp+0xE],0x0 \n " 
	"jne L0xABEL_0x005AE63A  \n " //!; => 0x005AE63A
	"mov cl,byte ptr [ebx+0x90] \n " 
	"test cl,cl \n " 
	"je L0xABEL_0x005AE557  \n " //!; => 0x005AE557
	"mov edx,dword ptr [esp+0x20] \n " 
	"cmp dword ptr [ebx+0xA4],edx \n " 
	"je L0xABEL_0x005AE563  \n " //!; => 0x005AE563
	"test cl,cl \n " 
	"jne L0xABEL_0x005AE63A  \n " //!; => 0x005AE63A
	"L0xABEL_0x005AE557: \n " 
	"cmp dword ptr [ebx+0xA0],edi \n " 
	"jne L0xABEL_0x005AE63A  \n " //!; => 0x005AE63A
	"L0xABEL_0x005AE563: \n " 
	"movzx ecx,word ptr [ebx+0x24] \n " 
	"mov dword ptr [esp+0x10],eax \n " 
	"mov eax,dword ptr [ebx+0x10] \n " 
	"mov esi,dword ptr [eax+0x18] \n " 
	"movzx eax,word ptr [ebx+0x26] \n " 
	"mov word ptr [esp+0x16],ax \n " 
	"mov eax,dword ptr [ebx+0x58] \n " 
	"mov word ptr [esp+0x14],cx \n " 
	"mov ecx,dword ptr [eax+0x908] \n " 
	"mov dword ptr [esp+0x1C],ecx \n " 
	"push 0xFFFFFFFF \n " 
	"lea ecx,dword ptr [esi+0x8] \n " 
	"call _0x678880 \n " 
	"push eax \n " 
	"mov eax,dword ptr [esp+0x24] \n " 
	"lea edi,dword ptr [esp+0x1C] \n " 
	"call _0x7209E0 \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x005AE63A  \n " //!; => 0x005AE63A
	"call _0x62A990 \n " 
	"movss xmm1,dword ptr [esp+0x24] \n " 
	"comiss xmm1,xmm0 \n " 
	"movss dword ptr [esp+0x1C],xmm0 \n " 
	"jbe L0xABEL_0x005AE5E0  \n " //!; => 0x005AE5E0
	"fld dword ptr [esp+0x1C] \n " 
	"push ecx \n " 
	"lea eax,dword ptr [ebx+0x28] \n " 
	"fstp dword ptr [esp] \n " 
	"lea edx,dword ptr [ebx+0x24] \n " 
	"lea esi,dword ptr [esp+0x20] \n " 
	"call _0x5AE170 \n " 
	"mov esi,dword ptr [eax] \n " 
	"add esp,0x4 \n " 
	"jmp L0xABEL_0x005AE5E4  \n " //!; => 0x005AE5E4
	"L0xABEL_0x005AE5E0: \n " 
	"mov esi,dword ptr [esp+0x10] \n " 
	"L0xABEL_0x005AE5E4: \n " 
	"push ecx \n " 
	"mov eax,esp \n " 
	"mov dword ptr [eax],esi \n " 
	"mov edx,dword ptr [ebx+0x24] \n " 
	"push ecx \n " 
	"mov eax,esp \n " 
	"push ebx \n " 
	"mov dword ptr [eax],edx \n " 
	"call _0x5AF4E0 \n " 
	"test al,al \n " 
	"je L0xABEL_0x005AE630  \n " //!; => 0x005AE630
	"push ecx \n " 
	"mov eax,esp \n " 
	"push ecx \n " 
	"mov dword ptr [eax],esi \n " 
	"mov ecx,dword ptr [ebx+0x24] \n " 
	"mov eax,esp \n " 
	"mov dword ptr [eax],ecx \n " 
	"mov ecx,ebx \n " 
	"call _0x5AF670 \n " 
	"test al,al \n " 
	"je L0xABEL_0x005AE630  \n " //!; => 0x005AE630
	"mov eax,dword ptr [esp+0x28] \n " 
	"movss xmm0,dword ptr [eax+0x50] \n " 
	"comiss xmm0,dword ptr [eax+0x54] \n " 
	"jbe L0xABEL_0x005AE63A  \n " //!; => 0x005AE63A
	"mov edx,dword ptr [ebx+0x70] \n " 
	"add edx,0xA \n " 
	"cmp dword ptr [esp+0x18],edx \n " 
	"jbe L0xABEL_0x005AE63A  \n " //!; => 0x005AE63A
	"jmp L0xABEL_0x005AE635  \n " //!; => 0x005AE635
	"L0xABEL_0x005AE630: \n " 
	"mov byte ptr [esp+0xF],0x0 \n " 
	"L0xABEL_0x005AE635: \n " 
	"mov byte ptr [esp+0xE],0x1 \n " 
	"L0xABEL_0x005AE63A: \n " 
	"cmp byte ptr [ebx+0x90],0x0 \n " 
	"je L0xABEL_0x005AEAE2  \n " //!; => 0x005AEAE2
	"cmp byte ptr [esp+0xF],0x0 \n " 
	"je L0xABEL_0x005AEAE2  \n " //!; => 0x005AEAE2
	"mov eax,dword ptr [ebx+0x78] \n " 
	"add eax,0x64 \n " 
	"cmp dword ptr [esp+0x18],eax \n " 
	"jbe L0xABEL_0x005AEAE2  \n " //!; => 0x005AEAE2
	"mov eax,dword ptr [ebx+0x10] \n " 
	"mov edi,dword ptr [eax+0x18] \n " 
	"mov dword ptr [esp+0x14],edi \n " 
	"call _0x6A9720 \n " 
	"xor esi,esi \n " 
	"cmp eax,esi \n " 
	"jne L0xABEL_0x005AE6DF  \n " //!; => 0x005AE6DF
	"lea ecx,dword ptr [ebx+0x7C] \n " 
	"mov byte ptr [ebx+0x90],0x0 \n " 
	"mov eax,dword ptr [ecx] \n " 
	"cmp eax,esi \n " 
	"je L0xABEL_0x005AE6A3  \n " //!; => 0x005AE6A3
	"cmp dword ptr [eax],ecx \n " 
	"je L0xABEL_0x005AE699  \n " //!; => 0x005AE699
	"jmp L0xABEL_0x005AE690  \n " //!; => 0x005AE690
	"lea ecx,dword ptr [ecx] \n " 
	"L0xABEL_0x005AE690: \n " 
	"mov eax,dword ptr [eax] \n " 
	"add eax,0x4 \n " 
	"cmp dword ptr [eax],ecx \n " 
	"jne L0xABEL_0x005AE690  \n " //!; => 0x005AE690
	"L0xABEL_0x005AE699: \n " 
	"mov edx,dword ptr [ecx+0x4] \n " 
	"mov dword ptr [eax],edx \n " 
	"mov dword ptr [ecx],esi \n " 
	"mov dword ptr [ecx+0x4],esi \n " 
	"L0xABEL_0x005AE6A3: \n " 
	"mov byte ptr [ebx+0x92],0x0 \n " 
	"movss xmm0,dword ptr [0xF3D21C] \n " 
	"movss dword ptr [ebx+0x84],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D220] \n " 
	"movss dword ptr [ebx+0x88],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D224] \n " 
	"movss dword ptr [ebx+0x8C],xmm0 \n " 
	"jmp L0xABEL_0x005AEAE2  \n " //!; => 0x005AEAE2
	"L0xABEL_0x005AE6DF: \n " 
	"mov edi,dword ptr [edi+0x584] \n " 
	"cmp edi,esi \n " 
	"je L0xABEL_0x005AE6F9  \n " //!; => 0x005AE6F9
	"lea ecx,dword ptr [edi-0x4] \n " 
	"cmp ecx,esi \n " 
	"je L0xABEL_0x005AE6F9  \n " //!; => 0x005AE6F9
	"mov eax,dword ptr [ecx] \n " 
	"mov edx,dword ptr [eax+0x4] \n " 
	"call edx \n " 
	"mov esi,eax \n " 
	"L0xABEL_0x005AE6F9: \n " 
	"mov eax,dword ptr [ebx+0x7C] \n " 
	"test eax,eax \n " 
	"lea edi,dword ptr [ebx+0x7C] \n " 
	"je L0xABEL_0x005AE708  \n " //!; => 0x005AE708
	"add eax,0xFFFFFFFC \n " 
	"jmp L0xABEL_0x005AE70A  \n " //!; => 0x005AE70A
	"L0xABEL_0x005AE708: \n " 
	"xor eax,eax \n " 
	"L0xABEL_0x005AE70A: \n " 
	"cmp esi,eax \n " 
	"mov eax,edi \n " 
	"setne byte ptr [esp+0xF] \n " 
	"call _0x57D4F0 \n " 
	"mov eax,dword ptr [edi] \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x005AE9E5  \n " //!; => 0x005AE9E5
	"add eax,0xFFFFFFFC \n " 
	"je L0xABEL_0x005AE9E5  \n " //!; => 0x005AE9E5
	"mov eax,dword ptr [edi] \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x005AE736  \n " //!; => 0x005AE736
	"add eax,0xFFFFFFFC \n " 
	"jmp L0xABEL_0x005AE738  \n " //!; => 0x005AE738
	"L0xABEL_0x005AE736: \n " 
	"xor eax,eax \n " 
	"L0xABEL_0x005AE738: \n " 
	"mov edx,dword ptr [esp+0x14] \n " 
	"cmp eax,edx \n " 
	"je L0xABEL_0x005AE9E9  \n " //!; => 0x005AE9E9
	"mov ecx,dword ptr [esi+0x54C] \n " 
	"test ecx,ecx \n " 
	"je L0xABEL_0x005AE770  \n " //!; => 0x005AE770
	"mov eax,dword ptr [ecx] \n " 
	"mov edx,dword ptr [eax+0x24] \n " 
	"call edx \n " 
	"cmp eax,0x1 \n " 
	"jne L0xABEL_0x005AE76C  \n " //!; => 0x005AE76C
	"mov eax,dword ptr [ebx+0x24] \n " 
	"mov dword ptr [ebx+0x28],eax \n " 
	"mov byte ptr [ebx+0x91],0x1 \n " 
	"jmp L0xABEL_0x005AEAE2  \n " //!; => 0x005AEAE2
	"L0xABEL_0x005AE76C: \n " 
	"mov edx,dword ptr [esp+0x14] \n " 
	"L0xABEL_0x005AE770: \n " 
	"mov byte ptr [ebx+0x91],0x0 \n " 
	"movss xmm0,dword ptr [edx+0x59C] \n " 
	"movss dword ptr [esp+0x2C],xmm0 \n " 
	"movss xmm0,dword ptr [edx+0x5A0] \n " 
	"movss dword ptr [esp+0x30],xmm0 \n " 
	"movss xmm0,dword ptr [edx+0x5A4] \n " 
	"lea ecx,dword ptr [edx+0x8] \n " 
	"movss dword ptr [esp+0x34],xmm0 \n " 
	"call _0x678880 \n " 
	"mov ecx,eax \n " 
	"lea edx,dword ptr [esp+0x2C] \n " 
	"lea eax,dword ptr [esp+0x1C] \n " 
	"call _0x579300 \n " 
	"mov eax,dword ptr [esp+0x20] \n " 
	"cmp dword ptr [ebx+0xA4],eax \n " 
	"mov cx,word ptr [esp+0x1C] \n " 
	"mov dx,word ptr [esp+0x1E] \n " 
	"mov word ptr [esp+0x10],cx \n " 
	"mov word ptr [esp+0x12],dx \n " 
	"je L0xABEL_0x005AE7F0  \n " //!; => 0x005AE7F0
	"push 0xF3D21C \n " 
	"lea ecx,dword ptr [ebx+0x84] \n " 
	"call _0x4F0A50 \n " 
	"test eax,eax \n " 
	"jne L0xABEL_0x005AE4DF  \n " //!; => 0x005AE4DF
	"L0xABEL_0x005AE7F0: \n " 
	"mov ecx,dword ptr [esp+0x10] \n " 
	"cmp dword ptr [ebx+0x28],ecx \n " 
	"je L0xABEL_0x005AE9B3  \n " //!; => 0x005AE9B3
	"lea edi,dword ptr [ebx+0x24] \n " 
	"lea eax,dword ptr [esp+0x10] \n " 
	"mov ecx,edi \n " 
	"call _0x5AD370 \n " 
	"fst dword ptr [esp+0x28] \n " 
	"fld dword ptr [0xDFF31C] \n " 
	"fcomip st(1) \n " 
	"fstp st(0) \n " 
	"jbe L0xABEL_0x005AE823  \n " //!; => 0x005AE823
	"movss xmm0,dword ptr [esp+0x28] \n " 
	"jmp L0xABEL_0x005AE82B  \n " //!; => 0x005AE82B
	"L0xABEL_0x005AE823: \n " 
	"movss xmm0,dword ptr [0xDFF31C] \n " 
	"L0xABEL_0x005AE82B: \n " 
	"movss dword ptr [esp+0x20],xmm0 \n " 
	"fld dword ptr [esp+0x20] \n " 
	"push ecx \n " 
	"lea eax,dword ptr [esp+0x14] \n " 
	"fstp dword ptr [esp] \n " 
	"mov edx,edi \n " 
	"lea esi,dword ptr [esp+0x2C] \n " 
	"call _0x5AE170 \n " 
	"mov esi,dword ptr [esp+0x2C] \n " 
	"mov eax,esp \n " 
	"mov dword ptr [eax],esi \n " 
	"mov edx,dword ptr [edi] \n " 
	"push ecx \n " 
	"mov eax,esp \n " 
	"push ebx \n " 
	"mov dword ptr [eax],edx \n " 
	"call _0x5AF4E0 \n " 
	"test al,al \n " 
	"je L0xABEL_0x005AE943  \n " //!; => 0x005AE943
	"push ecx \n " 
	"mov eax,esp \n " 
	"push ebx \n " 
	"mov dword ptr [eax],esi \n " 
	"call _0x5AF5B0 \n " 
	"test al,al \n " 
	"je L0xABEL_0x005AE943  \n " //!; => 0x005AE943
	"mov eax,dword ptr [esp+0x14] \n " 
	"mov ecx,dword ptr [eax+0x154] \n " 
	"mov eax,dword ptr [eax+0x150] \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov esi,dword ptr [eax+0x8CC] \n " 
	"mov eax,dword ptr [edx+0xB8] \n " 
	"call eax \n " 
	"fld1  \n " 
	"lea edx,dword ptr [esp+0x2C] \n " 
	"push eax \n " 
	"push ecx \n " 
	"mov eax,esi \n " 
	"fstp dword ptr [esp] \n " 
	"call _0x62CA60 \n " 
	"add esp,0x8 \n " 
	"test al,al \n " 
	"je L0xABEL_0x005AE943  \n " //!; => 0x005AE943
	"lea eax,dword ptr [esp+0x10] \n " 
	"mov ecx,edi \n " 
	"call _0x5AD370 \n " 
	"fmul dword ptr [0xE4F724] \n " 
	"mov ecx,dword ptr [esp+0x10] \n " 
	"movss xmm0,dword ptr [esp+0x2C] \n " 
	"fstp dword ptr [ebx+0x6C] \n " 
	"mov dword ptr [ebx+0x28],ecx \n " 
	"mov byte ptr [ebx+0x92],0x1 \n " 
	"movss dword ptr [ebx+0x84],xmm0 \n " 
	"movss xmm0,dword ptr [esp+0x30] \n " 
	"movss dword ptr [ebx+0x88],xmm0 \n " 
	"movss xmm0,dword ptr [esp+0x34] \n " 
	"lea esi,dword ptr [ebx+0x14] \n " 
	"movss dword ptr [ebx+0x8C],xmm0 \n " 
	"mov eax,esi \n " 
	"mov dword ptr [ebx+0xC],0x6 \n " 
	"call _0x5A9CF0 \n " 
	"cmp eax,0x1 \n " 
	"jbe L0xABEL_0x005AE4DF  \n " //!; => 0x005AE4DF
	"call _0x5AD130 \n " 
	"mov dx,word ptr [ebx+0x30] \n " 
	"mov ax,word ptr [ebx+0x34] \n " 
	"mov word ptr [esp+0x20],dx \n " 
	"lea edx,dword ptr [esp+0x20] \n " 
	"mov word ptr [esp+0x22],ax \n " 
	"call _0x5AFEC0 \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AE943: \n " 
	"cmp byte ptr [ebx+0x92],0x0 \n " 
	"mov ecx,dword ptr [esp+0x18] \n " 
	"mov dword ptr [ebx+0x78],ecx \n " 
	"jne L0xABEL_0x005AE964  \n " //!; => 0x005AE964
	"lea eax,dword ptr [ebx+0x14] \n " 
	"call _0x5A9CF0 \n " 
	"cmp eax,0x1 \n " 
	"jne L0xABEL_0x005AEAE2  \n " //!; => 0x005AEAE2
	"L0xABEL_0x005AE964: \n " 
	"movss xmm0,dword ptr [0xF3D21C] \n " 
	"movss dword ptr [ebx+0x84],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D220] \n " 
	"movss dword ptr [ebx+0x88],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D224] \n " 
	"movss dword ptr [ebx+0x8C],xmm0 \n " 
	"lea esi,dword ptr [ebx+0x14] \n " 
	"mov byte ptr [ebx+0x92],0x0 \n " 
	"call _0x5AD130 \n " 
	"push 0x0 \n " 
	"push ebx \n " 
	"call _0x5ADFE0 \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AE9B3: \n " 
	"movss xmm0,dword ptr [esp+0x2C] \n " 
	"movss dword ptr [ebx+0x84],xmm0 \n " 
	"movss xmm0,dword ptr [esp+0x30] \n " 
	"movss dword ptr [ebx+0x88],xmm0 \n " 
	"movss xmm0,dword ptr [esp+0x34] \n " 
	"movss dword ptr [ebx+0x8C],xmm0 \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AE9E5: \n " 
	"mov edx,dword ptr [esp+0x14] \n " 
	"L0xABEL_0x005AE9E9: \n " 
	"cmp byte ptr [esp+0xF],0x0 \n " 
	"je L0xABEL_0x005AEA78  \n " //!; => 0x005AEA78
	"mov eax,dword ptr [edi] \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x005AE9FF  \n " //!; => 0x005AE9FF
	"add eax,0xFFFFFFFC \n " 
	"jmp L0xABEL_0x005AEA01  \n " //!; => 0x005AEA01
	"L0xABEL_0x005AE9FF: \n " 
	"xor eax,eax \n " 
	"L0xABEL_0x005AEA01: \n " 
	"cmp eax,edx \n " 
	"jne L0xABEL_0x005AEA78  \n " //!; => 0x005AEA78
	"lea esi,dword ptr [ebx+0x14] \n " 
	"mov eax,esi \n " 
	"call _0x5A9CF0 \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x005AEA2A  \n " //!; => 0x005AEA2A
	"L0xABEL_0x005AEA13: \n " 
	"call _0x5AD130 \n " 
	"mov eax,esi \n " 
	"mov dword ptr [ebx+0x64],0x0 \n " 
	"call _0x5A9CF0 \n " 
	"test eax,eax \n " 
	"jne L0xABEL_0x005AEA13  \n " //!; => 0x005AEA13
	"L0xABEL_0x005AEA2A: \n " 
	"movss xmm0,dword ptr [0xF3D21C] \n " 
	"movss dword ptr [ebx+0x84],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D220] \n " 
	"movss dword ptr [ebx+0x88],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D224] \n " 
	"push 0x0 \n " 
	"movss dword ptr [ebx+0x8C],xmm0 \n " 
	"push ebx \n " 
	"mov byte ptr [ebx+0x92],0x0 \n " 
	"mov byte ptr [ebx+0x91],0x0 \n " 
	"call _0x5ADFE0 \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AEA78: \n " 
	"movss xmm0,dword ptr [0xF3D21C] \n " 
	"movss dword ptr [ebx+0x84],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D220] \n " 
	"movss dword ptr [ebx+0x88],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D224] \n " 
	"movss dword ptr [ebx+0x8C],xmm0 \n " 
	"mov byte ptr [ebx+0x92],0x0 \n " 
	"mov eax,dword ptr [edi] \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x005AEADB  \n " //!; => 0x005AEADB
	"cmp dword ptr [eax],edi \n " 
	"je L0xABEL_0x005AEAC9  \n " //!; => 0x005AEAC9
	"lea esp,dword ptr [esp] \n " 
	"L0xABEL_0x005AEAC0: \n " 
	"mov eax,dword ptr [eax] \n " 
	"add eax,0x4 \n " 
	"cmp dword ptr [eax],edi \n " 
	"jne L0xABEL_0x005AEAC0  \n " //!; => 0x005AEAC0
	"L0xABEL_0x005AEAC9: \n " 
	"mov edx,dword ptr [edi+0x4] \n " 
	"mov dword ptr [eax],edx \n " 
	"mov dword ptr [edi],0x0 \n " 
	"mov dword ptr [edi+0x4],0x0 \n " 
	"L0xABEL_0x005AEADB: \n " 
	"mov byte ptr [ebx+0x90],0x0 \n " 
	"L0xABEL_0x005AEAE2: \n " 
	"cmp byte ptr [ebx+0x91],0x0 \n " 
	"jne L0xABEL_0x005AE4DF  \n " //!; => 0x005AE4DF
	"mov eax,dword ptr [ebx+0x10] \n " 
	"mov esi,dword ptr [eax+0x18] \n " 
	"lea ecx,dword ptr [esi+0xD0] \n " 
	"push ecx \n " 
	"lea ecx,dword ptr [esi+0xB4] \n " 
	"call _0x4F0A50 \n " 
	"test eax,eax \n " 
	"jne L0xABEL_0x005AEB20  \n " //!; => 0x005AEB20
	"mov edx,dword ptr [esi] \n " 
	"mov eax,dword ptr [edx+0x3C] \n " 
	"push 0x1 \n " 
	"mov ecx,esi \n " 
	"call eax \n " 
	"test al,al \n " 
	"jne L0xABEL_0x005AEB20  \n " //!; => 0x005AEB20
	"add dword ptr [ebx+0x74],0x1 \n " 
	"jmp L0xABEL_0x005AEB27  \n " //!; => 0x005AEB27
	"L0xABEL_0x005AEB20: \n " 
	"mov dword ptr [ebx+0x74],0x0 \n " 
	"L0xABEL_0x005AEB27: \n " 
	"movss xmm0,dword ptr [ebx+0x6C] \n " 
	"comiss xmm0,dword ptr [esp+0x24] \n " 
	"jae L0xABEL_0x005AEB44  \n " //!; => 0x005AEB44
	"cmp byte ptr [esp+0xE],0x0 \n " 
	"jne L0xABEL_0x005AEB44  \n " //!; => 0x005AEB44
	"cmp dword ptr [ebx+0x74],0x1E \n " 
	"jle L0xABEL_0x005AE4DF  \n " //!; => 0x005AE4DF
	"L0xABEL_0x005AEB44: \n " 
	"mov ecx,dword ptr [esp+0x18] \n " 
	"mov edi,dword ptr [ebx+0x28] \n " 
	"lea esi,dword ptr [ebx+0x28] \n " 
	"mov eax,ebx \n " 
	"mov dword ptr [ebx+0x70],ecx \n " 
	"mov dword ptr [esp+0x28],edi \n " 
	"call _0x5AF7E0 \n " 
	"test al,al \n " 
	"je L0xABEL_0x005AEBB9  \n " //!; => 0x005AEBB9
	"mov eax,esi \n " 
	"lea ecx,dword ptr [ebx+0x24] \n " 
	"call _0x5AD370 \n " 
	"fmul dword ptr [0xE4F724] \n " 
	"mov byte ptr [ebx+0x92],0x0 \n " 
	"fstp dword ptr [ebx+0x6C] \n " 
	"movss xmm0,dword ptr [0xF3D21C] \n " 
	"movss dword ptr [ebx+0x84],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D220] \n " 
	"movss dword ptr [ebx+0x88],xmm0 \n " 
	"movss xmm0,dword ptr [0xF3D224] \n " 
	"movss dword ptr [ebx+0x8C],xmm0 \n " 
	"mov byte ptr [ebx+0x94],0x0 \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AEBB9: \n " 
	"cmp dword ptr [ebx+0x74],0x1E \n " 
	"jle L0xABEL_0x005AEBD4  \n " //!; => 0x005AEBD4
	"mov edx,dword ptr [ebx+0x24] \n " 
	"xor eax,eax \n " 
	"mov dword ptr [ebx+0xC],eax \n " 
	"mov dword ptr [esi],edx \n " 
	"mov dword ptr [ebx+0x64],eax \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AEBD4: \n " 
	"cmp byte ptr [ebx+0x94],0x0 \n " 
	"je L0xABEL_0x005AEBF5  \n " //!; => 0x005AEBF5
	"push 0x3 \n " 
	"mov esi,ebx \n " 
	"mov byte ptr [ebx+0x94],0x0 \n " 
	"call _0x5AEC70 \n " 
	"pop edi \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"L0xABEL_0x005AEBF5: \n " 
	"mov eax,dword ptr [ebx+0x1C] \n " 
	"sub eax,0x4 \n " 
	"cmp dword ptr [eax],edi \n " 
	"jne L0xABEL_0x005AE4D6  \n " //!; => 0x005AE4D6
	"mov eax,dword ptr [ebx+0x10] \n " 
	"mov ecx,dword ptr [eax+0x18] \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov eax,dword ptr [edx+0x3C] \n " 
	"push 0x7 \n " 
	"call eax \n " 
	"test al,al \n " 
	"jne L0xABEL_0x005AE4D6  \n " //!; => 0x005AE4D6
	"movzx edx,word ptr [esp+0x2A] \n " 
	"mov eax,dword ptr [ebx+0x10] \n " 
	"mov esi,dword ptr [eax+0x18] \n " 
	"movzx ecx,di \n " 
	"cvtsi2ss xmm0,ecx \n " 
	"movss dword ptr [esp+0x2C],xmm0 \n " 
	"xorps xmm0,xmm0 \n " 
	"movss dword ptr [esp+0x30],xmm0 \n " 
	"cvtsi2ss xmm0,edx \n " 
	"push 0x1 \n " 
	"lea edi,dword ptr [esp+0x30] \n " 
	"movss dword ptr [esp+0x38],xmm0 \n " 
	"call _0x62ABA0 \n " 
	"add esp,0x4 \n " 
	"test al,al \n " 
	"je L0xABEL_0x005AE4D6  \n " //!; => 0x005AE4D6
	"pop edi \n " 
	"mov dword ptr [ebx+0x64],0xA \n " 
	"pop esi \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	" \n " //! 0xFinis of selected range: 0x005AEC69
	" \n " //!; Internal calls outside selected range (after)
);
	
}

void NavigationTick()
{
__asm__
(
	" \n " //!; Source: forgedalliance_exxt.exe (base 0x00400000 - 4194304)
	" \n " //!; Internal calls outside selected range (before) 
	"_0x4F0A50 =  5184080 \n " 
	"_0x579300 =  5743360 \n " 
	"_0x746280 =  7631488 \n " 
	"_0x5AE2D0 =  5960400 \n " 
	"_0x5AD8B0 =  5957808 \n " 
	"_0x678880 =  6789248 \n " 
	"_0x5AD800 =  5957632 \n " 
	"_0x5A6C50 =  5930064 \n " 	
	" \n " //!; Start of selected range: 0x005A4280
	"push ebp \n " 
	"mov ebp,esp \n " 
	"and esp,0xFFFFFFC0 \n " 
	"sub esp,0x30 \n " 
	"push ebx \n " 
	"push ebp \n " 
	"push esi \n " 
	//"mov esi,ecx \n " 
	"mov eax,dword ptr [ecx+0x4C] \n " 
	"mov ebp,dword ptr [eax+0x150] \n " 
	//"mov eax,dword ptr [eax+0x70] \n " 
	"push edi \n " 
	//"push eax \n " 
	//"push 0xE1B9EC \n " 
	//"mov eax,ebp \n " 
	//"call _0x746280 \n " 
	"mov eax,dword ptr [ecx+0x54] \n " 
	"add eax,0xFFFFFFFF \n " 
	//"add esp,0x8 \n " 
	"cmp eax,0x1 \n " 
	"ja L0xABEL_0x005A440E  \n " //!; => 0x005A440E
	"mov esi,ecx \n "
	"mov ecx,dword ptr [esi+0x4C] \n " 
	"mov edi,dword ptr [ecx+0x550] \n " 
	"test edi,edi \n " 
	"je L0xABEL_0x005A440E  \n " //!; => 0x005A440E
	"mov eax,dword ptr [ecx] \n " 
	"mov edx,dword ptr [eax+0x14] \n " 
	"mov ebx,dword ptr [esi+0x58] \n " 
	"call edx \n " 
	"push eax \n " 
	"call %[UpdateCurrentPosition] \n " 
	"mov ecx,dword ptr [esi+0x58] \n " 
	"lea eax,dword ptr [esp+0x28] \n " 
	"call _0x5AD8B0 \n " 
	"mov ecx,dword ptr [esi+0x4C] \n " 
	"mov eax,dword ptr [ecx] \n " 
	"mov edx,dword ptr [eax+0x14] \n " 
	"call edx \n " 
	"fld dword ptr [eax+0x8] \n " 
	"mov ecx,dword ptr [esi+0x4C] \n " 
	"fstp dword ptr [esp+0x20] \n " 
	"mov eax,dword ptr [ecx] \n " 
	"mov edx,dword ptr [eax+0x14] \n " 
	"call edx \n " 
	"fld dword ptr [esp+0x20] \n " 
	"sub esp,0x10 \n " 
	"fstp qword ptr [esp+0x8] \n " 
	"fld dword ptr [eax] \n " 
	//"mov eax,ebp \n " 
	"fstp qword ptr [esp] \n " 
	//"push 0xE1BA00 \n " 
	//"call _0x746280 \n " 
	"fld dword ptr [esp+0x44] \n " 
	//"add esp,0x4 \n " 
	"fstp qword ptr [esp+0x8] \n " 
	//"mov eax,ebp \n " 
	"fld dword ptr [esp+0x38] \n " 
	"fstp qword ptr [esp] \n " 
	//"push 0xE1BA18 \n " 
	//"call _0x746280 \n " 
	"mov eax,dword ptr [esi+0x58] \n " 
	"add esp,0x10 \n "
	//"add esp,0x14 \n " 
	"cmp dword ptr [eax+0xC],0x2 \n " 
	"je L0xABEL_0x005A43D4  \n " //!; => 0x005A43D4
	"mov edx,dword ptr [edi] \n " 
	"mov edx,dword ptr [edx+0xC] \n " 
	"lea eax,dword ptr [esp+0x34] \n " 
	"push eax \n " 
	"mov ecx,edi \n " 
	"call edx \n " 
	"push eax \n " 
	"lea ecx,dword ptr [esp+0x2C] \n " 
	"call _0x4F0A50 \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x005A43D4  \n " //!; => 0x005A43D4
	"mov ecx,dword ptr [esi+0x4C] \n " 
	"mov ebx,dword ptr [esi+0x58] \n " 
	"mov ebp,dword ptr [edi] \n " 
	"add ecx,0x8 \n " 
	"call _0x678880 \n " 
	"mov ecx,eax \n " 
	"lea edx,dword ptr [esp+0x28] \n " 
	"lea eax,dword ptr [esp+0x24] \n " 
	"call _0x579300 \n " 
	"mov edx,eax \n " 
	"mov eax,ebx \n " 
	"call _0x5AD800 \n " 
	"mov ecx,edi \n " 
	"push eax \n " 
	"mov eax,dword ptr [ebp+0x28] \n " 
	"call eax \n " 
	"cmp dword ptr [esi+0x54],0x1 \n " 
	"mov edx,dword ptr [edi] \n " 
	"jne L0xABEL_0x005A43AB  \n " //!; => 0x005A43AB
	"mov eax,dword ptr [edx+0x24] \n " 
	"push 0x0 \n " 
	"mov ecx,edi \n " 
	"call eax \n " 
	"jmp L0xABEL_0x005A43BD  \n " //!; => 0x005A43BD
	"L0xABEL_0x005A43AB: \n " 
	"mov eax,dword ptr [esi+0x58] \n " 
	"cmp dword ptr [eax+0x5C],0x0 \n " 
	"mov edx,dword ptr [edx+0x24] \n " 
	"setl cl \n " 
	"push ecx \n " 
	"mov ecx,edi \n " 
	"call edx \n " 
	"L0xABEL_0x005A43BD: \n " 
	"mov eax,dword ptr [edi] \n " 
	"mov edx,dword ptr [eax+0x4] \n " 
	"push 0x1 \n " 
	"lea ecx,dword ptr [esp+0x2C] \n " 
	"push ecx \n " 
	"mov ecx,edi \n " 
	"call edx \n " 
	"mov dword ptr [esi+0x54],0x2 \n " 
	"L0xABEL_0x005A43D4: \n " 
	"mov eax,dword ptr [esi+0x58] \n " 
	"cmp dword ptr [eax+0xC],0x1 \n " 
	"jg L0xABEL_0x005A440E  \n " //!; => 0x005A440E
	"mov edx,dword ptr [edi] \n " 
	"mov eax,dword ptr [edx+0x2C] \n " 
	"push 0x0 \n " 
	"mov ecx,edi \n " 
	"call eax \n " 
	"mov ecx,dword ptr [esi+0x58] \n " 
	"cmp dword ptr [ecx+0xC],0x0 \n " 
	"mov edx,dword ptr [esi-0x10] \n " 
	"mov eax,dword ptr [edx+0x4C] \n " 
	"lea ecx,dword ptr [esi-0x10] \n " 
	"sete bl \n " 
	"call eax \n " 
	"neg bl \n " 
	"sbb ebx,ebx \n " 
	"and ebx,0x2 \n " 
	"add esi,0xFFFFFFF4 \n " 
	"mov edi,ebx \n " 
	"call _0x5A6C50 \n " 
	"L0xABEL_0x005A440E: \n " 
	"pop edi \n " 
	"mov eax,0x1 \n " 
	"pop esi \n " 
	"pop ebp \n " 
	"pop ebx \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret  \n " 
	" \n " //! 0xFinis of selected range: 0x005A441A
	" \n " //!; Internal calls outside selected range (after)
	:
	: [UpdateCurrentPosition] "i" (UpdateCurrentPosition)
	: "memory"
);
	
}