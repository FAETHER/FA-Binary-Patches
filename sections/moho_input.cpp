#include "include/funcDefs.h"
#include "include/global_func_table.h"
#include <stdlib.h>

void MOHO_USER_INPUT()
{
	register int eax asm("eax");
	
	__asm__
	(
		" \n " //!; Source: forgedalliancetest4.exe (base 0x00400000 - 4194304)
		" \n " //!; Labels outside selected range (before)
		//"L0xABEL_0x00000000 =  0 \n " 
		" \n " //!; Internal calls outside selected range (before)
		//"edx =  0 \n " 
		"_0x8380E0 =  8618208 \n " 
		"_0x7B2530 =  8070448 \n " 
		"_0x86F520 =  8844576 \n " 
		"_0x7873A0 =  7893920 \n " 
		"_0x83DDA0 =  8641952 \n " 
		"_0x7B25F0 =  8070640 \n " 
		"_0x7F0490 =  8324240 \n " 
		"_0x81EC00 =  8514560 \n " 
		"_0x81F7B0 =  8517552 \n " 
		"_0x4207D0 =  4327376 \n " 
		"_0x83ECF0 =  8645872 \n " 
		"_0x7EF070 =  8319088 \n " 
		"_0x81DD00 =  8510720 \n " 
		"_0x7B33B0 =  8074160 \n " 
		"_0x81F700 =  8517376 \n " 
		"_0x83EDF0 =  8646128 \n " 
		"_0x81FC80 =  8518784 \n " 
		"_0x81FCD0 =  8518864 \n " 
		"_0x79CB70 =  7981936 \n " 
		"_0x86DE30 =  8838704 \n " 
		"_0x81F760 =  8517472 \n " 
		"_0x86E060 =  8839264 \n " 
		"_0x78DDE0 =  7921120 \n " 
		"_0x838A80 =  8620672 \n " 
		"_0x865E20 =  8805920 \n " 
		"_0x870310 =  8848144 \n " 
		"_0x82B230 =  8565296 \n " 
		"_0x408710 =  4228880 \n " 
		"_0x7AAD00 =  8039680 \n " 
		"_0x405590 =  4216208 \n " 
		"_0x86E270 =  8839792 \n " 
		"_0x865880 =  8804480 \n " 
		"_0x823CB0 =  8535216 \n " 
		"_0x8242B0 =  8536752 \n " 
		"_0x7B59B0 =  8083888 \n " 
		"_0x838800 =  8620032 \n " 
		"_0x7B2920 =  8071456 \n " 
		"_0x8B5BB0 =  9132976 \n " 
		"_0x896000 =  9003008 \n " 
		"_0x8B4300 =  9126656 \n " 
		"_0x8B4140 =  9126208 \n " 
		"_0xA825B9 =  11019705 \n " 
		"_0x873810 =  8861712 \n " 
		"_0x896590 =  9004432 \n " 
		"_0x8B43F0 =  9126896 \n " 
		"_0x8B1220 =  9114144 \n " 		
		"SetCursorPos = 0x00C0F7C0 \n"
		"_0x7B25C0 = 0x7B25C0 \n"
		"_0x957A60 = 0x957A60 \n"
		"Sleep = 0x00C0F574 \n"
		"WaitForSingleObject = 0x00C0F524 \n"
		" \n " //!; Start of selected range: 0x008704B0
		
		"cmp dword ptr [0x011FD23F], 0x1 \n" //BLOCK BASED ON THE VARIABLE
		"jne run_input_check \n"
		//"push 5000 \n"
		//"push dword ptr [0x11FD253] \n"
		//"call dword ptr [WaitForSingleObject] \n"
		"mov al, 0x1 \n"
		"ret 0x4 \n"
		"run_input_check: \n"
		
		"push ebp \n " 
		"mov ebp,esp \n " 
		"and esp,0xFFFFFFF8 \n " 
		"push 0xFFFFFFFF \n " 
		"push 0xBC29A5 \n " 
		"push eax \n " 
		"sub esp,0x150 \n " 
		"push ebx \n " 
		"mov ebx,dword ptr [ebp+0x8] \n " 
		"mov eax,dword ptr [ebx] \n " 
		"cmp eax,0x2 \n " 
		"push esi \n " 
		"push edi \n " 
		"mov edi,ecx \n " 
		"mov dword ptr [esp+0x20],edi \n " 
		"jne L0xABEL_0x008704F0  \n " //!; => 0x008704F0
		"mov byte ptr [edi+0x275],0x1 \n " 
		"jmp L0xABEL_0x008705BB  \n " //!; => 0x008705BB
		"L0xABEL_0x008704F0: \n " 
		"cmp eax,0x4 \n " 
		"jne L0xABEL_0x008705BB  \n " //!; => 0x008705BB
		"cmp byte ptr [edi+0x276],0x0 \n " 
		"mov byte ptr [edi+0x275],0x0 \n " 
		"je L0xABEL_0x0087051F  \n " //!; => 0x0087051F
		"cmp byte ptr [0x10A645F],0x0 \n " 
		"jne L0xABEL_0x0087051F  \n " //!; => 0x0087051F
		"mov ecx,dword ptr [edi+0x120] \n " 
		"mov eax,dword ptr [ecx] \n " 
		"mov edx,dword ptr [eax+0x74] \n " 
		"call edx \n " 
		"L0xABEL_0x0087051F: \n " 
		"mov byte ptr [edi+0x276],0x0 \n " 
		"cmp byte ptr [0x10A6464],0x0 \n " 
		"jne L0xABEL_0x0087056C  \n " //!; => 0x0087056C
		"cmp byte ptr [0x10C4840],0x0 \n " 
		"je L0xABEL_0x0087056C  \n " //!; => 0x0087056C
		"mov ecx,dword ptr [0x10A6450] \n " 
		"mov byte ptr [0x10C4840],0x0 \n " 
		"mov eax,dword ptr [ecx] \n " 
		"mov edx,dword ptr [eax+0x34] \n " 
		"call edx \n " 
		"mov cl,0x1 \n " 
		"cmp byte ptr [eax+0x45],cl \n " 
		"je L0xABEL_0x00870559  \n " //!; => 0x00870559
		"mov byte ptr [eax+0x45],cl \n " 
		"mov byte ptr [eax+0x44],cl \n " 
		"L0xABEL_0x00870559: \n " 
		"mov eax,dword ptr [0x10C4848] \n " 
		"mov ecx,dword ptr [0x10C4844] \n " 
		"push eax \n " 
		"push ecx \n " 
		"call dword ptr [SetCursorPos] \n " 
		"L0xABEL_0x0087056C: \n " 
		"mov edx,dword ptr [edi+0x208] \n " 
		"mov eax,dword ptr [edx+0x400] \n " 
		"cmp byte ptr [eax+0x10],0x0 \n " 
		"je L0xABEL_0x008705BB  \n " //!; => 0x008705BB
		"lea esi,dword ptr [esp+0x2C] \n " 
		"call _0x7B25C0 \n " 
		"mov dword ptr [esp+0x164],0x0 \n " 
		"mov eax,dword ptr [edi+0x208] \n " 
		"mov esi,dword ptr [eax+0x400] \n " 
		"mov byte ptr [esi+0x10],0x0 \n " 
		"call _0x8380E0 \n " 
		"lea eax,dword ptr [esp+0x2C] \n " 
		"mov dword ptr [esp+0x164],0xFFFFFFFF \n " 
		"call _0x7B2530 \n " 
		"L0xABEL_0x008705BB: \n " 
		"cmp byte ptr [0x10C4840],0x0 \n " 
		"jne L0xABEL_0x008705E5  \n " //!; => 0x008705E5
		"movss xmm0,dword ptr [ebx+0x4] \n " 
		"movss xmm1,dword ptr [ebx+0x8] \n " 
		"lea ecx,dword ptr [esp+0x24] \n " 
		"push ecx \n " 
		"push edi \n " 
		"movss dword ptr [esp+0x2C],xmm0 \n " 
		"movss dword ptr [esp+0x30],xmm1 \n " 
		"call _0x86F520 \n " 
		"L0xABEL_0x008705E5: \n " 
		"mov esi,dword ptr [edi+0x208] \n " 
		"add esi,0x4B0 \n " 
		"push ebx \n " 
		"mov ecx,edi \n " 
		"mov dword ptr [esp+0x1C],esi \n " 
		"call _0x7873A0 \n " 
		"test al,al \n " 
		"jne L0xABEL_0x0087094A  \n " //!; => 0x0087094A
		"cmp dword ptr [edi+0x138],0x0 \n " 
		"jg L0xABEL_0x0087094A  \n " //!; => 0x0087094A
		"cmp dword ptr [edi+0x20C],0x0 \n " 
		"mov byte ptr [edi+0x274],al \n " 
		"mov byte ptr [esp+0x17],0x1 \n " 
		"je L0xABEL_0x008708AF  \n " //!; => 0x008708AF
		
/* 		"cmp dword ptr [0x011FD23F], 0x1 \n"
		"je L0xABEL_0x0087110F \n"	 */
		
		"mov edx,dword ptr [esi+0x18] \n " 
		"and edx,0xFF000000 \n " 
		"cmp edx,0xFF000000 \n " 
		"je L0xABEL_0x008708AF  \n " //!; => 0x008708AF
		"mov eax,dword ptr [edi+0x208] \n " 
		"mov ecx,dword ptr [esi+0x18] \n " 
		"mov eax,dword ptr [eax+0x3FC] \n " 
		"push ecx \n " 
		"mov esi,eax \n " 
		"call _0x8B5BB0 \n " 
		"test eax,eax \n " 
		"mov dword ptr [esp+0x10],eax \n " 
		"je L0xABEL_0x008708AF  \n " //!; => 0x008708AF
		"lea edx,dword ptr [esp+0x38] \n " 
		"push edx \n " 
		"call _0x83DDA0 \n " 
		"add esp,0x4 \n " 
		"lea esi,dword ptr [esp+0x2C] \n " 
		"mov dword ptr [esp+0x164],0x1 \n " 
		"call _0x7B25C0 \n " 
		"mov eax,esi \n " 
		"mov byte ptr [esp+0x164],0x2 \n " 
		"mov ebx,dword ptr [edi+0x208] \n " 
		"push eax \n " 
		"call _0x896000 \n " 
		"lea ebx,dword ptr [esp+0x24] \n " 
		"mov eax,esi \n " 
		"call _0x7B25F0 \n " 
		"mov eax,dword ptr [esp+0x28] \n " 
		"cmp eax,dword ptr [esp+0x30] \n " 
		"je L0xABEL_0x008706E9  \n " //!; => 0x008706E9
		"mov edi,edi \n " 
		"L0xABEL_0x008706B0: \n " 
		"mov eax,dword ptr [eax+0x10] \n " 
		"xor ebx,ebx \n " 
		"cmp eax,ebx \n " 
		"je L0xABEL_0x008706BE  \n " //!; => 0x008706BE
		"add eax,0xFFFFFFF8 \n " 
		"jmp L0xABEL_0x008706C0  \n " //!; => 0x008706C0
		"L0xABEL_0x008706BE: \n " 
		"xor eax,eax \n " 
		"L0xABEL_0x008706C0: \n " 
		"mov ecx,dword ptr [esp+0x10] \n " 
		"push eax \n " 
		"push ecx \n " 
		"call _0x8B4300 \n " 
		"test al,al \n " 
		"jne L0xABEL_0x008707D5  \n " //!; => 0x008707D5
		"lea edx,dword ptr [esp+0x24] \n " 
		"push edx \n " 
		"call _0x7F0490 \n " 
		"mov eax,dword ptr [esp+0x28] \n " 
		"cmp eax,dword ptr [esp+0x30] \n " 
		"jne L0xABEL_0x008706B0  \n " //!; => 0x008706B0
		"jmp L0xABEL_0x008706EB  \n " //!; => 0x008706EB
		"L0xABEL_0x008706E9: \n " 
		"xor ebx,ebx \n " 
		"L0xABEL_0x008706EB: \n " 
		"mov esi,dword ptr [esp+0x10] \n " 
		"push esi \n " 
		"call _0x8B4140 \n " 
		"cmp eax,0xA \n " 
		"je L0xABEL_0x00870709  \n " //!; => 0x00870709
		"push esi \n " 
		"call _0x8B4140 \n " 
		"cmp eax,0xB \n " 
		"jne L0xABEL_0x008707D5  \n " //!; => 0x008707D5
		"L0xABEL_0x00870709: \n " 
		"mov eax,dword ptr [edi+0x208] \n " 
		"mov esi,dword ptr [esp+0x18] \n " 
		"push eax \n " 
		"push ebx \n " 
		"lea ecx,dword ptr [esp+0xA0] \n " 
		"push esi \n " 
		"push ecx \n " 
		"call _0x81EC00 \n " 
		"push ebx \n " 
		"lea edx,dword ptr [esp+0x10C] \n " 
		"mov byte ptr [esp+0x178],0x3 \n " 
		"mov ecx,dword ptr [edi+0x208] \n " 
		"push esi \n " 
		"push edx \n " 
		"call _0x81F7B0 \n " 
		"add esp,0x1C \n " 
		"mov eax,0x4 \n " 
		"mov byte ptr [esp+0x164],al \n " 
		"cmp dword ptr [esp+0x9C],eax \n " 
		"je L0xABEL_0x00870761  \n " //!; => 0x00870761
		"cmp dword ptr [esp+0xFC],eax \n " 
		"jne L0xABEL_0x008707A8  \n " //!; => 0x008707A8
		"L0xABEL_0x00870761: \n " 
		"lea eax,dword ptr [esp+0x38] \n " 
		"push 0xE42360 \n " 
		"push eax \n " 
		"call _0x4207D0 \n " 
		"fld dword ptr [0xE4F6E8] \n " 
		"add esp,0x8 \n " 
		"push ebx \n " 
		"push ecx \n " 
		"fstp dword ptr [esp] \n " 
		"push 0xFFFFFFFF \n " 
		"push ecx \n " 
		"test al,al \n " 
		"mov dword ptr [esp+0x20],esp \n " 
		"lea ecx,dword ptr [esi+0x1C] \n " 
		"mov eax,esp \n " 
		"je L0xABEL_0x00870796  \n " //!; => 0x00870796
		"mov dword ptr [eax],0xE48938 \n " 
		"jmp L0xABEL_0x0087079C  \n " //!; => 0x0087079C
		"L0xABEL_0x00870796: \n " 
		"mov dword ptr [eax],0xE48974 \n " 
		"L0xABEL_0x0087079C: \n " 
		"call _0x83ECF0 \n " 
		"add esp,0x10 \n " 
		"mov byte ptr [esp+0x17],bl \n " 
		"L0xABEL_0x008707A8: \n " 
		"lea edx,dword ptr [esp+0xF8] \n " 
		"mov byte ptr [esp+0x164],0x3 \n " 
		"call _0x7EF070 \n " 
		"lea edx,dword ptr [esp+0x98] \n " 
		"mov byte ptr [esp+0x164],0x2 \n " 
		"call _0x7EF070 \n " 
		"jmp L0xABEL_0x0087085A  \n " //!; => 0x0087085A
		"L0xABEL_0x008707D5: \n " 
		"mov esi,dword ptr [esp+0x10] \n " 
		"push esi \n " 
		"call _0x8B4140 \n " 
		"cmp eax,0x2 \n " 
		"je L0xABEL_0x008707EF  \n " //!; => 0x008707EF
		"push esi \n " 
		"call _0x8B4140 \n " 
		"cmp eax,0x4 \n " 
		"jne L0xABEL_0x0087085A  \n " //!; => 0x0087085A
		"L0xABEL_0x008707EF: \n " 
		"mov eax,dword ptr [edi+0x208] \n " 
		"add eax,0x4A0 \n " 
		"push esi \n " 
		"push eax \n " 
		"call _0x81DD00 \n " 
		"add esp,0x8 \n " 
		"test al,al \n " 
		"je L0xABEL_0x0087085A  \n " //!; => 0x0087085A
		"lea ecx,dword ptr [esp+0x38] \n " 
		"push 0xE42360 \n " 
		"push ecx \n " 
		"call _0x4207D0 \n " 
		"fld dword ptr [0xE4F6E8] \n " 
		"add esp,0x8 \n " 
		"push ebx \n " 
		"push ecx \n " 
		"fstp dword ptr [esp] \n " 
		"push 0xFFFFFFFF \n " 
		"push ecx \n " 
		"mov ecx,dword ptr [esp+0x28] \n " 
		"add ecx,0x1C \n " 
		"test al,al \n " 
		"mov dword ptr [esp+0x20],esp \n " 
		"mov eax,esp \n " 
		"je L0xABEL_0x00870841  \n " //!; => 0x00870841
		"mov dword ptr [eax],0xE489B0 \n " 
		"jmp L0xABEL_0x00870847  \n " //!; => 0x00870847
		"L0xABEL_0x00870841: \n " 
		"mov dword ptr [eax],0xE489E8 \n " 
		"L0xABEL_0x00870847: \n " 
		"call _0x83ECF0 \n " 
		"add esp,0x10 \n " 
		"mov byte ptr [esp+0x17],bl \n " 
		"mov byte ptr [edi+0x274],0x1 \n " 
		"L0xABEL_0x0087085A: \n " 
		"mov byte ptr [esp+0x164],0x1 \n " 
		"mov eax,dword ptr [esp+0x30] \n " 
		"mov ecx,dword ptr [eax] \n " 
		"push eax \n " 
		"push ecx \n " 
		"lea edx,dword ptr [esp+0x18] \n " 
		"push edx \n " 
		"lea edi,dword ptr [esp+0x38] \n " 
		"call _0x7B33B0 \n " 
		"mov eax,dword ptr [esp+0x30] \n " 
		"push eax \n " 
		"call _0x957A60 \n " 
		"add esp,0x4 \n " 
		"lea ecx,dword ptr [esp+0x38] \n " 
		"mov dword ptr [esp+0x30],ebx \n " 
		"mov dword ptr [esp+0x34],ebx \n " 
		"push ecx \n " 
		"mov dword ptr [esp+0x168],0xFFFFFFFF \n " 
		"call _0x81F700 \n " 
		"cmp byte ptr [esp+0x17],bl \n " 
		"mov edi,dword ptr [esp+0x20] \n " 
		"mov ebx,dword ptr [ebp+0x8] \n " 
		"je L0xABEL_0x008708B4  \n " //!; => 0x008708B4
		"L0xABEL_0x008708AF: \n " 
		"call _0x83EDF0 \n " 
		"L0xABEL_0x008708B4: \n " 
		"mov eax,dword ptr [ebx] \n " 
		
		"cmp eax,0x8 \n " 
		
		"mov esi,dword ptr [esp+0x18] \n " 
		"jne L0xABEL_0x00870963  \n " //!; => 0x00870963
		"mov edx,dword ptr [ebx+0x1C] \n " 
		"mov ecx,esi \n " 
		"push edx \n " 
		"lea esi,dword ptr [esp+0x3C] \n " 
		"call _0x81FC80 \n " 
		"add esp,0x4 \n " 
		"mov dword ptr [esp+0x164],0x7 \n " 
		"cmp dword ptr [esp+0x38],0x0 \n " 
		"jne L0xABEL_0x00870921  \n " //!; => 0x00870921
		"mov ecx,dword ptr [edi+0x120] \n " 
		"mov edx,dword ptr [esp+0x18] \n " 
		"mov eax,dword ptr [ecx] \n " 
		"mov eax,dword ptr [eax+0x78] \n " 
		"add edx,0x1C \n " 
		"push edx \n " 
		"call eax \n " 
		"mov edi,dword ptr [edi+0x120] \n " 
		"mov edx,dword ptr [edi] \n " 
		"cvtsi2ss xmm0,dword ptr [ebx+0xC] \n " 
		"cvtsi2ss xmm1,dword ptr [ebx+0x10] \n " 
		"mov eax,dword ptr [edx+0x7C] \n " 
		"push ecx \n " 
		"divss xmm0,xmm1 \n " 
		"mov ecx,edi \n " 
		"movss dword ptr [esp],xmm0 \n " 
		"call eax \n " 
		"jmp L0xABEL_0x00870936  \n " //!; => 0x00870936
		"L0xABEL_0x00870921: \n " 
		"mov ecx,dword ptr [edi+0x208] \n " 
		"push 0x0 \n " 
		"push ecx \n " 
		"lea ecx,dword ptr [esp+0x40] \n " 
		"call _0x81FCD0 \n " 
		"add esp,0x8 \n " 
		"L0xABEL_0x00870936: \n " 
		"lea edx,dword ptr [esp+0x38] \n " 
		"mov dword ptr [esp+0x164],0xFFFFFFFF \n " 
		"call _0x7EF070 \n " 
		"L0xABEL_0x0087094A: \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"L0xABEL_0x00870963: \n " 
		"mov ecx,0x1 \n " 
		"cmp eax,ecx \n " 
		"jne L0xABEL_0x00870B0A  \n " //!; => 0x00870B0A
		"push 0x20 \n " 
		"call _0x79CB70 \n " 
		"add esp,0x4 \n " 
		"test al,al \n " 
		"je L0xABEL_0x00870A70  \n " //!; => 0x00870A70
		"cmp byte ptr [0x10A645F],0x0 \n " 
		"jne L0xABEL_0x008709A8  \n " //!; => 0x008709A8
		"mov ecx,dword ptr [edi+0x120] \n " 
		"mov edx,dword ptr [ecx] \n " 
		"mov eax,dword ptr [edx+0x4C] \n " 
		"call eax \n " 
		"fld dword ptr [0xF57AA0] \n " 
		"fcomip st(1) \n " 
		"fstp st(0)\n " 
		"jbe L0xABEL_0x00870A70  \n " //!; => 0x00870A70
		"L0xABEL_0x008709A8: \n " 
		"cmp byte ptr [edi+0x275],0x0 \n " 
		"je L0xABEL_0x00870ADE  \n " //!; => 0x00870ADE
		"cmp byte ptr [edi+0x276],0x0 \n " 
		"je L0xABEL_0x00870A55  \n " //!; => 0x00870A55
		"push edi \n " 
		"push 0x1 \n " 
		"call _0x86DE30 \n " 
		"cmp byte ptr [0x10A6464],0x0 \n " 
		"mov ecx,dword ptr [edi+0x120] \n " 
		"je L0xABEL_0x00870A1C  \n " //!; => 0x00870A1C
		"movss xmm0,dword ptr [esi+0x1C] \n " 
		"subss xmm0,dword ptr [edi+0x278] \n " 
		"movss dword ptr [esp+0x24],xmm0 \n " 
		"movss xmm0,dword ptr [esi+0x20] \n " 
		"subss xmm0,dword ptr [edi+0x27C] \n " 
		"movss dword ptr [esp+0x28],xmm0 \n " 
		"mov edx,dword ptr [ecx] \n " 
		"mov edx,dword ptr [edx+0x6C] \n " 
		"lea eax,dword ptr [esp+0x24] \n " 
		"push eax \n " 
		"call edx \n " 
		"xor eax,eax \n " 
		"xor ecx,ecx \n " 
		"mov dword ptr [0x10C484C],eax \n " 
		"mov dword ptr [0x10C4850],ecx \n " 
		"jmp L0xABEL_0x00870A5C  \n " //!; => 0x00870A5C
		"L0xABEL_0x00870A1C: \n " 
		"cvtsi2ss xmm0,dword ptr [0x10C484C] \n " 
		"movss dword ptr [esp+0x24],xmm0 \n " 
		"cvtsi2ss xmm0,dword ptr [0x10C4850] \n " 
		"movss dword ptr [esp+0x28],xmm0 \n " 
		"mov eax,dword ptr [ecx] \n " 
		"mov eax,dword ptr [eax+0x6C] \n " 
		"lea edx,dword ptr [esp+0x24] \n " 
		"push edx \n " 
		"call eax \n " 
		"xor eax,eax \n " 
		"xor ecx,ecx \n " 
		"mov dword ptr [0x10C484C],eax \n " 
		"mov dword ptr [0x10C4850],ecx \n " 
		"jmp L0xABEL_0x00870A5C  \n " //!; => 0x00870A5C
		"L0xABEL_0x00870A55: \n " 
		"mov byte ptr [edi+0x276],0x1 \n " 
		"L0xABEL_0x00870A5C: \n " 
		"fld dword ptr [esi+0x1C] \n " 
		"fstp dword ptr [edi+0x278] \n " 
		"fld dword ptr [esi+0x20] \n " 
		"fstp dword ptr [edi+0x27C] \n " 
		"jmp L0xABEL_0x00870ADE  \n " //!; => 0x00870ADE
		"L0xABEL_0x00870A70: \n " 
		"cmp byte ptr [edi+0x276],0x0 \n " 
		"je L0xABEL_0x00870A8F  \n " //!; => 0x00870A8F
		"cmp byte ptr [0x10A645F],0x0 \n " 
		"jne L0xABEL_0x00870A8F  \n " //!; => 0x00870A8F
		"mov ecx,dword ptr [edi+0x120] \n " 
		"mov edx,dword ptr [ecx] \n " 
		"mov eax,dword ptr [edx+0x74] \n " 
		"call eax \n " 
		"L0xABEL_0x00870A8F: \n " 
		"mov byte ptr [edi+0x276],0x0 \n " 
		"cmp byte ptr [0x10A6464],0x0 \n " 
		"jne L0xABEL_0x00870ADE  \n " //!; => 0x00870ADE
		"cmp byte ptr [0x10C4840],0x0 \n " 
		"je L0xABEL_0x00870ADE  \n " //!; => 0x00870ADE
		"mov ecx,dword ptr [0x10A6450] \n " 
		"mov byte ptr [0x10C4840],0x0 \n " 
		"mov edx,dword ptr [ecx] \n " 
		"mov eax,dword ptr [edx+0x34] \n " 
		"call eax \n " 
		"cmp byte ptr [eax+0x45],0x1 \n " 
		"je L0xABEL_0x00870ACA  \n " //!; => 0x00870ACA
		"mov byte ptr [eax+0x45],0x1 \n " 
		"mov byte ptr [eax+0x44],0x1 \n " 
		"L0xABEL_0x00870ACA: \n " 
		"mov ecx,dword ptr [0x10C4848] \n " 
		"mov edx,dword ptr [0x10C4844] \n " 
		"push ecx \n " 
		"push edx \n " 
		"call dword ptr [SetCursorPos] \n " 
		"L0xABEL_0x00870ADE: \n " 
		"mov edi,dword ptr [edi+0x120] \n " 
		"mov eax,dword ptr [edi] \n " 
		"mov edx,dword ptr [eax+0x78] \n " 
		"add esi,0x1C \n " 
		"push esi \n " 
		"mov ecx,edi \n " 
		"call edx \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		////"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"L0xABEL_0x00870B0A: \n " 
		"cmp eax,0x5 \n " 
		"jne L0xABEL_0x00870BC9  \n " //!; => 0x00870BC9
		"cmp dword ptr [ebx+0x14],0x2 \n " 
		"jne L0xABEL_0x00870BC9  \n " //!; => 0x00870BC9
		"mov eax,dword ptr [ebx+0x1C] \n " 
		"mov ecx,dword ptr [esp+0x18] \n " 
		"push eax \n " 
		"lea esi,dword ptr [esp+0x3C] \n " 
		"call _0x81F760 \n " 
		"add esp,0x4 \n " 
		"mov dword ptr [esp+0x164],0x8 \n " 
		"cmp dword ptr [esp+0x38],0x0 \n " 
		"jne L0xABEL_0x00870B9B  \n " //!; => 0x00870B9B
		"push 0x20 \n " 
		"call _0xA825B9 \n " 
		"add esp,0x4 \n " 
		"mov dword ptr [esp+0x10],eax \n " 
		"test eax,eax \n " 
		"mov byte ptr [esp+0x164],0x9 \n " 
		"je L0xABEL_0x00870B7E  \n " //!; => 0x00870B7E
		"mov esi,dword ptr [edi+0x120] \n " 
		"xor edx,edx \n " 
		"push edx \n " 
		"mov ecx,0x873BD0 \n " 
		"push ecx \n " 
		"mov ecx,dword ptr [esp+0x20] \n " 
		"push edi \n " 
		"add ecx,0x1C \n " 
		"push ecx \n " 
		"push esi \n " 
		"push eax \n " 
		"call _0x86E060 \n " 
		"jmp L0xABEL_0x00870B80  \n " //!; => 0x00870B80
		"L0xABEL_0x00870B7E: \n " 
		"xor eax,eax \n " 
		"L0xABEL_0x00870B80: \n " 
		"mov byte ptr [esp+0x164],0x8 \n " 
		"mov edi,dword ptr [edi+0xFC] \n " 
		"push ebx \n " 
		"mov esi,eax \n " 
		"call _0x78DDE0 \n " 
		"add esp,0x4 \n " 
		"jmp L0xABEL_0x00870BB0  \n " //!; => 0x00870BB0
		"L0xABEL_0x00870B9B: \n " 
		"mov edx,dword ptr [edi+0x208] \n " 
		"push 0x0 \n " 
		"push edx \n " 
		"lea ecx,dword ptr [esp+0x40] \n " 
		"call _0x81FCD0 \n " 
		"add esp,0x8 \n " 
		"L0xABEL_0x00870BB0: \n " 
		"lea edx,dword ptr [esp+0x38] \n " 
		"mov dword ptr [esp+0x164],0xFFFFFFFF \n " 
		"call _0x7EF070 \n " 
		"jmp L0xABEL_0x0087110F  \n " //!; => 0x0087110F
		"L0xABEL_0x00870BC9: \n " 
		
/* 		"cmp dword ptr [0x011FD23F], 0x1 \n"
		"je L0xABEL_0x00870FF7 \n"	 */		
		
		"cmp eax,0x6 \n " 
		"jne L0xABEL_0x00870CA4  \n " //!; => 0x00870CA4
		"cmp dword ptr [ebx+0x14],ecx \n " 
		"jne L0xABEL_0x00870CA4  \n " //!; => 0x00870CA4
		"mov eax,dword ptr [edi+0x208] \n " 
		"mov eax,dword ptr [eax+0x400] \n " 
		"cmp byte ptr [eax+0x10],0x0 \n " 
		"je L0xABEL_0x00870C0D  \n " //!; => 0x00870C0D
		"mov esi,eax \n " 
		"L0xABEL_0x00870BEF: \n " 
		"call _0x838A80 \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"L0xABEL_0x00870C0D: \n " 
		"mov eax,dword ptr [edi+0x148] \n " 
		"sub eax,ecx \n " 
		"mov dword ptr [edi+0x140],0x6 \n " 
		"je L0xABEL_0x00870C7A  \n " //!; => 0x00870C7A
		"sub eax,0x3 \n " 
		"jne L0xABEL_0x0087110F  \n " //!; => 0x0087110F
		"mov eax,dword ptr [esi+0x10] \n " 
		"test eax,eax \n " 
		"je L0xABEL_0x00870C61  \n " //!; => 0x00870C61
		"add eax,0xFFFFFFF8 \n " 
		"je L0xABEL_0x00870C61  \n " //!; => 0x00870C61
		"mov edx,dword ptr [edi+0x11C] \n " 
		"mov eax,dword ptr [edx+0x28] \n " 
		"lea ecx,dword ptr [edi+0x11C] \n " 
		"call eax \n " 
		"test al,al \n " 
		"jne L0xABEL_0x00870C61  \n " //!; => 0x00870C61
		"mov ecx,dword ptr [edi+0x120] \n " 
		"mov edx,dword ptr [edi+0x208] \n " 
		"push ecx \n " 
		"push edx \n " 
		"call _0x865E20 \n " 
		"add esp,0x8 \n " 
		"L0xABEL_0x00870C61: \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"L0xABEL_0x00870C7A: \n " 
		"movzx eax,byte ptr [ebx+0x1C] \n " 
		"and eax,0xFFFFFF01 \n " 
		"push eax \n " 
		"push esi \n " 
		"push edi \n " 
		"call _0x870310 \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"L0xABEL_0x00870CA4: \n " 
		"cmp eax,0x5 \n " 
		"jne L0xABEL_0x00870F12  \n " //!; => 0x00870F12
		"cmp dword ptr [ebx+0x14],ecx \n " 
		"jne L0xABEL_0x00870F1B  \n " //!; => 0x00870F1B
		"mov ecx,dword ptr [edi+0x208] \n " 
		"mov esi,dword ptr [ecx+0x400] \n " 
		"cmp byte ptr [esi+0x10],0x0 \n " 
		"jne L0xABEL_0x00870BEF  \n " //!; => 0x00870BEF
		"mov dword ptr [edi+0x140],eax \n " 
		"mov edx,dword ptr [ebx+0x1C] \n " 
		"mov eax,dword ptr [esp+0x18] \n " 
		"push edx \n " 
		"push eax \n " 
		"lea edx,dword ptr [esp+0xA0] \n " 
		"push edx \n " 
		"call _0x81F7B0 \n " 
		"add esp,0xC \n " 
		"add edi,0x148 \n " 
		"mov ebx,eax \n " 
		"mov dword ptr [esp+0x164],0xA \n " 
		"call _0x82B230 \n " 
		"lea edx,dword ptr [esp+0x98] \n " 
		"mov dword ptr [esp+0x164],0xFFFFFFFF \n " 
		"call _0x7EF070 \n " 
		"mov eax,dword ptr [edi] \n " 
		//"cmp edi,0x5 \n " 
		//"ja L0xABEL_0x00870EDC  \n " //!; => 0x00870EDC
	);		
		switch(eax)
		{
			case 0:
				__asm__("jmp L0xABEL_0x0087110F  \n ");
				break;
			case 2:
			case 3:
				__asm__("jmp case3  \n ");
				break;	
			case 4:
				break;
			case 5:
				__asm__("jmp case5  \n ");
				break;
			default:
				__asm__("jmp L0xABEL_0x00870EDC  \n ");
				break;					
		}
	__asm__
	(		
		
		//"jmp L0xABEL_0x00000000  \n " //!; => 0x00000000
		"mov edi,dword ptr [esp+0x20] \n " 
		"mov eax,dword ptr [edi+0x11C] \n " 
		"mov edx,dword ptr [eax+0x28] \n " 
		"lea ecx,dword ptr [edi+0x11C] \n " 
		"call edx \n " 
		"test al,al \n " 
		"je L0xABEL_0x00870E0C  \n " //!; => 0x00870E0C
		"cmp dword ptr [edi+0x294],0x0 \n " 
		"je L0xABEL_0x00870E3A  \n " //!; => 0x00870E3A
		"push ecx \n " 
		"lea ebx,dword ptr [edi+0x280] \n " 
		"mov ecx,esp \n " 
		"mov dword ptr [esp+0x14],esp \n " 
		"push ebx \n " 
		"call _0x408710 \n " 
		"call _0x7AAD00 \n " 
		"add esp,0x4 \n " 
		"test eax,eax \n " 
		"je L0xABEL_0x00870D8C  \n " //!; => 0x00870D8C
		"fldz  \n " 
		"mov edx,dword ptr [eax] \n " 
		"mov edx,dword ptr [edx+0x28] \n " 
		"push ecx \n " 
		"mov ecx,dword ptr [esp+0x1C] \n " 
		"fstp dword ptr [esp] \n " 
		"add ecx,0x4 \n " 
		"push ecx \n " 
		"mov ecx,eax \n " 
		"call edx \n " 
		"L0xABEL_0x00870D8C: \n " 
		"push 0x24 \n " 
		"call _0xA825B9 \n " 
		"mov esi,eax \n " 
		"add esp,0x4 \n " 
		"mov dword ptr [esp+0x10],esi \n " 
		"test esi,esi \n " 
		"mov dword ptr [esp+0x164],0xB \n " 
		"je L0xABEL_0x00870DD2  \n " //!; => 0x00870DD2
		"sub esp,0x1C \n " 
		"mov ecx,esp \n " 
		"mov dword ptr [esp+0x3C],esp \n " 
		"push ebx \n " 
		"call _0x405590 \n " 
		"mov byte ptr [esp+0x180],0xC \n " 
		"push esi \n " 
		"mov byte ptr [esp+0x184],0xB \n " 
		"call _0x86E270 \n " 
		"jmp L0xABEL_0x00870DD4  \n " //!; => 0x00870DD4
		"L0xABEL_0x00870DD2: \n " 
		"xor eax,eax \n " 
		"L0xABEL_0x00870DD4: \n " 
		"mov ecx,dword ptr [ebp+0x8] \n " 
		"mov dword ptr [esp+0x164],0xFFFFFFFF \n " 
		"mov edi,dword ptr [edi+0xFC] \n " 
		"push ecx \n " 
		"mov esi,eax \n " 
		"call _0x78DDE0 \n " 
		"add esp,0x4 \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"L0xABEL_0x00870E0C: \n " 
		"mov edx,dword ptr [ebp+0x8] \n " 
		"mov eax,dword ptr [edi+0xFC] \n " 
		"mov ecx,dword ptr [edi+0x120] \n " 
		"push edx \n " 
		"mov edx,dword ptr [edi+0x208] \n " 
		"push eax \n " 
		"call _0x865880 \n " 
		"lea edx,dword ptr [edi+0x29C] \n " 
		"mov ecx,eax \n " 
		"add esp,0x8 \n " 
		"mov eax,edx \n " 
		"call _0x873810 \n " 
		"L0xABEL_0x00870E3A: \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"case3: \n"
		"mov eax,dword ptr [esp+0x20] \n " 
		"mov edx,dword ptr [eax+0x120] \n " 
		"mov edi,dword ptr [eax+0xFC] \n " 
		"lea ecx,dword ptr [eax+0x214] \n " 
		"push ecx \n " 
		"mov ecx,dword ptr [ebp+0x8] \n " 
		"push edx \n " 
		"mov edx,dword ptr [eax+0x208] \n " 
		"push ecx \n " 
		"push edx \n " 
		"call _0x823CB0 \n " 
		"add esp,0x10 \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"case5: \n " 
		"mov eax,dword ptr [esp+0x18] \n " 
		"mov ecx,dword ptr [eax+0x18] \n " 
		"mov eax,dword ptr [esp+0x20] \n " 
		"mov edx,dword ptr [eax+0x120] \n " 
		"mov edi,dword ptr [eax+0xFC] \n " 
		"push ecx \n " 
		"mov ecx,dword ptr [ebp+0x8] \n " 
		"push edx \n " 
		"mov edx,dword ptr [eax+0x208] \n " 
		"push ecx \n " 
		"push edx \n " 
		"call _0x8242B0 \n " 
		"add esp,0x10 \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"L0xABEL_0x00870EDC: \n " 
		"mov eax,dword ptr [ebp+0x8] \n " 
		"movzx ecx,byte ptr [eax+0x1C] \n " 
		"mov edx,dword ptr [esp+0x18] \n " 
		"mov eax,dword ptr [esp+0x20] \n " 
		"and ecx,0xFFFFFF01 \n " 
		"push ecx \n " 
		"push edx \n " 
		"push eax \n " 
		"call _0x870310 \n " 
		"mov al,0x1 \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		"L0xABEL_0x00870F12: \n " 

		"cmp eax,0x6 \n " 
		"jne L0xABEL_0x00870FF7  \n " //!; => 0x00870FF7
		"L0xABEL_0x00870F1B: \n " 
		"cmp dword ptr [ebx+0x14],0x3 \n " 
		"jne L0xABEL_0x00870FF7  \n " //!; => 0x00870FF7
		"mov ecx,dword ptr [edi+0x208] \n " 
		"push ecx \n " 
		"mov dword ptr [edi+0x144],eax \n " 
		"mov edx,dword ptr [ebx+0x1C] \n " 
		"mov eax,dword ptr [esp+0x1C] \n " 
		"push edx \n " 
		"push eax \n " 
		"lea ecx,dword ptr [esp+0xA4] \n " 
		"push ecx \n " 
		"call _0x81EC00 \n " 
		"add esp,0x10 \n " 
		"lea esi,dword ptr [edi+0x1A8] \n " 
		"mov ebx,eax \n " 
		"mov edi,esi \n " 
		"mov dword ptr [esp+0x164],0xD \n " 
		"call _0x82B230 \n " 
		"lea edx,dword ptr [esp+0x98] \n " 
		"mov dword ptr [esp+0x164],0xFFFFFFFF \n " 
		"call _0x7EF070 \n " 
		"cmp dword ptr [esi],0x1 \n " 
		"jne L0xABEL_0x0087110F  \n " //!; => 0x0087110F
		"mov edi,dword ptr [esp+0x20] \n " 
		"mov eax,dword ptr [edi+0x208] \n " 
		"add eax,0x4A0 \n " 
		"call _0x7B59B0 \n " 
		"test eax,eax \n " 
		"jbe L0xABEL_0x0087110F  \n " //!; => 0x0087110F
		"mov edx,dword ptr [ebp+0x8] \n " 
		"mov al,byte ptr [edx+0x1C] \n " 
		"and al,0x1 \n " 
		"lea esi,dword ptr [esp+0x2C] \n " 
		"mov byte ptr [esp+0x10],al \n " 
		"call _0x7B25C0 \n " 
		"mov ecx,esi \n " 
		"mov dword ptr [esp+0x164],0xE \n " 
		"mov ebx,dword ptr [edi+0x208] \n " 
		"push ecx \n " 
		"call _0x896000 \n " 
		"mov edx,dword ptr [edi+0x208] \n " 
		"mov eax,dword ptr [edx+0x400] \n " 
		"mov ecx,dword ptr [esp+0x10] \n " 
		"mov edx,dword ptr [esp+0x18] \n " 
		"push ecx \n " 
		"add edx,0x4 \n " 
		"push edx \n " 
		"push 0x1 \n " 
		"push eax \n " 
		"mov eax,esi \n " 
		"call _0x838800 \n " 
		"jmp L0xABEL_0x008710FB  \n " //!; => 0x008710FB
		"L0xABEL_0x00870FF7: \n " 
		
		"cmp eax,0x7 \n " 
		
		"jne L0xABEL_0x0087110F  \n " //!; => 0x0087110F
		"cmp dword ptr [ebx+0x14],0x3 \n " 
		
		"jne L0xABEL_0x0087110F  \n " //!; => 0x0087110F
		
		"mov eax,dword ptr [esi+0x18] \n " 
		
/* 		"cmp dword ptr [0x011FD23F], 0x1 \n"
		"je L0xABEL_0x0087110F \n"	 */		
		
		"and eax,0xFF000000 \n " // -> right click input
		"cmp eax,0xFF000000 \n " 
		
		"je L0xABEL_0x008710A0  \n " //!; => 0x008710A0
		
		"mov ebx,dword ptr [ebx+0x1C] \n " 
		"test cl,bl \n " 
		
		"je L0xABEL_0x008710A0  \n " //!; => 0x008710A0
		
		"test bl,0x2 \n " 
		
		"je L0xABEL_0x008710A0  \n " //!; => 0x008710A0
		
		"mov ebx,dword ptr [edi+0x208] \n " 
		"mov ecx,ebx \n " 
		"call _0x896590 \n " 
		"test al,al \n " 
		"jne L0xABEL_0x008710A0  \n " //!; => 0x008710A0
		"mov ecx,dword ptr [esp+0x18] \n " 
		"mov edx,dword ptr [ecx+0x18] \n " 
		"mov esi,dword ptr [ebx+0x3FC] \n " 
		"push edx \n " 
		"call _0x8B5BB0 \n " 
		"test eax,eax \n " 
		"mov dword ptr [esp+0x10],eax \n " 
		"je L0xABEL_0x008710D2  \n " //!; => 0x008710D2
		"push eax \n " 
		"call _0x8B43F0 \n " 
		"mov esi,eax \n " 
		"lea ebx,dword ptr [esp+0x18] \n " 
		"mov dword ptr [esp+0x20],esi \n " 
		"call _0x7B25F0 \n " 
		"mov esi,dword ptr [esi+0x4] \n " 
		"cmp dword ptr [esp+0x1C],esi \n " 
		"je L0xABEL_0x008710D2  \n " //!; => 0x008710D2
		"L0xABEL_0x00871073: \n " 
		"lea eax,dword ptr [esp+0x18] \n " 
		"call _0x7B2920 \n " 
		"mov ebx,dword ptr [esp+0x10] \n " 
		"mov esi,eax \n " 
		"call _0x8B1220 \n " 
		"lea ecx,dword ptr [esp+0x18] \n " 
		"push ecx \n " 
		"call _0x7F0490 \n " 
		"mov edx,dword ptr [esp+0x20] \n " 
		"mov eax,dword ptr [edx+0x4] \n " 
		"cmp dword ptr [esp+0x1C],eax \n " 
		"jne L0xABEL_0x00871073  \n " //!; => 0x00871073
		"jmp L0xABEL_0x008710D2  \n " //!; => 0x008710D2
		"L0xABEL_0x008710A0: \n " 
		"cmp dword ptr [edi+0x1A8],0x0 \n " 
		"lea ecx,dword ptr [edi+0x1A8] \n " 
		"je L0xABEL_0x008710D2  \n " //!; => 0x008710D2
		"cmp byte ptr [0x10C4840],0x0 \n " 
		"jne L0xABEL_0x008710D2  \n " //!; => 0x008710D2
		"cmp dword ptr [edi+0x144],0x6 \n " 
		"mov edx,dword ptr [edi+0x208] \n " 
		"sete al \n " 
		"push eax \n " 
		"push edx \n " 
		"call _0x81FCD0 \n " 
		"add esp,0x8 \n " 
		"L0xABEL_0x008710D2: \n " 
		"lea esi,dword ptr [esp+0x2C] \n " 
		"call _0x7B25C0 \n " 
		"mov dword ptr [esp+0x164],0xF \n " 
		"mov eax,dword ptr [edi+0x208] \n " 
		"mov esi,dword ptr [eax+0x400] \n " 
		"mov byte ptr [esi+0x10],0x0 \n " 
		"call _0x8380E0 \n " 
		"L0xABEL_0x008710FB: \n " 
		"lea eax,dword ptr [esp+0x2C] \n " 
		"mov dword ptr [esp+0x164],0xFFFFFFFF \n " 
		"call _0x7B2530 \n " 
		"L0xABEL_0x0087110F: \n " 
		"mov ecx,dword ptr [esp+0x15C] \n " 
		"pop edi \n " 
		"pop esi \n " 
		"xor al,al \n " 
		//"mov dword ptr [0x0],ecx \n " 
		"pop ebx \n " 
		"mov esp,ebp \n " 
		"pop ebp \n " 
		"ret 0x4 \n " 
		" \n " //! 0xFinis of selected range: 0x00871127
		" \n " //!; Internal calls outside selected range (after)
	);
	
}