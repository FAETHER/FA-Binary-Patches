#include "include/funcDefs.h"
#include "include/global_func_table.h"
#include <stdlib.h>

void GlobalRings()
{
	__asm__
	(
		"sub esp,0x14 \n " 
		"push ebx \n " 
		"push ebp \n " 
		"mov ebp,dword ptr [esp+0x2C] \n " 
		"mov eax,dword ptr [ebp+0x8] \n " 
		"mov ecx,dword ptr [ebp+0x4] \n " 
		"push esi \n " 
		"push edi \n " 
		"push eax \n " 
		"push ecx \n " 
		"lea eax,dword ptr [esp+0x3C] \n " 
		"mov ebx,ebp \n " 
	);
	__asm__ (
		"call -0x1000 +8330320 \n " 
		"mov eax,dword ptr [esp+0x30] \n " 
		"lea esi,dword ptr [esp+0x34] \n " 
	);
	__asm__ (
		"call -0x1000 +8327632 \n " 
		"mov eax,dword ptr [esp+0x34] \n " 
		"cmp eax,dword ptr [0x10BF00C] \n " 
		"je ExitLabel2 \n " 
		"mov eax,dword ptr [eax+0x28] \n " 
		"test eax,eax \n " 
		"mov dword ptr [esp+0x34],eax \n " 
		"je ExitLabel2 \n " 
		"mov eax,dword ptr [esp+0x28] \n " 
		"mov ebx,dword ptr [eax] \n " 
		"cmp ebx,dword ptr [eax+0x4] \n " 
		"je ExitLabel2 \n " 
		"ContinueLoopThroughUnits: \n"
		"mov eax,dword ptr [ebx] \n " 
		"test eax,eax \n " 
		"je ExitLabel \n " 
		"lea esi,dword ptr [eax-0x8] \n " 
		"test esi,esi \n " 
		"je ExitLabel \n " 
		"mov eax,dword ptr [esi] \n " 
		"mov edx,dword ptr [eax+0x34] \n " 
		"mov ecx,esi \n " 
		"call edx \n " 
		"test al,al \n " 
		"jne ExitLabel \n " 
		"mov eax,dword ptr [esi] \n " 
		"mov edx,dword ptr [eax+0xC] \n " 
		"mov ecx,esi \n " 
		"call edx \n " 
		"mov edi,eax \n " 
		"test edi,edi \n " 
		"je ExitLabel \n " 
		"mov eax,dword ptr [edi+0x148] \n " 
		"mov edx,dword ptr [eax+0x28] \n " 
		"lea esi,dword ptr [edi+0x148] \n " 
		"mov ecx,esi \n " 
		"call edx \n " 
		"test al,al \n " 
		"jne ExitLabel \n " 
		"mov eax,dword ptr [esi] \n " 
		"mov edx,dword ptr [eax+0x2C] \n " 
		"mov ecx,esi \n " 
		"call edx \n " 
		"test al,al \n " 
		"jne ExitLabel \n " 
		"mov eax,dword ptr [esi] \n " 
		"mov edx,dword ptr [eax+0x1C] \n " 
		"mov ecx,esi \n " 
		"call edx \n " 
		"test eax,eax \n " 
		"je ExitLabel \n " 
		"mov edx,dword ptr [esp+0x30] \n " 
		"add edx,0x20 \n " 
	);
	__asm__ (
		"call -0x1000 +5683664 \n " 
		"test eax,eax \n " 
		"jbe ExitLabel \n " 
		"mov ecx,dword ptr [esp+0x34] \n " 
		"fld dword ptr [esp+0x2C] \n " 
		"mov eax,dword ptr [ecx] \n " 
		"mov eax,dword ptr [eax+0x8] \n " 
		"push ecx \n " 
		"fstp dword ptr [esp] \n " 
		"push edi \n " 
		"lea edx,dword ptr [esp+0x18] \n " 
		"push edx \n " 
		"call eax \n " 
		"test al,al \n " 
		"je ExitLabel \n " 
		
		"xor ecx,ecx \n"
		"mov esi, dword ptr ds:[0x011FD237] \n"
		"cmp esi, ecx \n"
		"je FirstTime \n"
		"mov edx, dword ptr ds:[0x011FD23B] \n"
		"cmp edx, ecx \n"
		"je FirstTime \n"
		"mov edi, 0x4 \n"
		"mov eax, dword ptr ds:[ebx] \n"
		"NextItem: \n"
		"cmp dword ptr ds:[esi], eax \n"
		"je ExitLabel \n"
		"inc ecx \n"
		"sub esi, edi \n"
		"cmp ecx, edx \n"
		"jl NextItem \n"
		
		"FirstTime: \n"
		"lea edx,dword ptr [esp+0x10] \n " 
		"mov esi,ebp \n " 
	);
	__asm__ (
		"call -0x1000 +8327952 \n " 
		"ExitLabel: \n"
		"mov ecx,dword ptr [esp+0x28] \n " 
		"add ebx,0x8 \n " 
		"cmp ebx,dword ptr [ecx+0x4] \n " 
		"jne ContinueLoopThroughUnits \n " 
		"ExitLabel2: \n"
		"pop edi \n " 
		"pop esi \n " 
		"pop ebp \n " 
		"pop ebx \n " 
		"add esp,0x14 \n " 
		"ret 0x10 \n " 
	);
}

void GetSelectedUnits()
{
	__asm__
	(
		"sub esp,0x14 \n " 
		"mov eax,dword ptr [ebx+0x4A4] \n " 
		"mov eax,dword ptr [eax] \n " 
		"push ebp \n " 
		"mov ebp,dword ptr [esp+0x1C] \n " 
		"push esi \n " 
		"lea esi,dword ptr [ebx+0x4A0] \n " 
		"push edi \n " 
		"push eax \n " 
		"lea edi,dword ptr [esp+0x28] \n " 
	);
	__asm__ (
		"call -0x1000 +6730544 \n " 
		"mov dword ptr [0x011FD23B],0 \n"
		"mov eax,dword ptr [eax] \n " 
		"cmp eax,dword ptr [esi+0x4] \n " 
		"mov dword ptr [esp+0xC],esi \n " 
		"mov dword ptr [esp+0x10],eax \n " 
		"je exit \n " 
		"continue: \n"
		"inc dword ptr [0x011FD23B] \n"
		"mov eax,dword ptr [eax+0x10] \n " 
		"test eax,eax \n " 
		"je label0 \n " 
		"lea ecx,dword ptr [eax-0x8] \n " 
		"jmp label1_sel \n " 
		"label0: \n"
		"xor ecx,ecx \n " 
		"label1_sel: \n"
		"mov eax,dword ptr [ecx] \n " 
		"mov edx,dword ptr [eax+0xC] \n " 
		"call edx \n " 
		"test eax,eax \n " 
		"je label2_sel \n " 
		"push eax \n " 
		"push ebp \n " 
		"lea esi,dword ptr [esp+0x1C] \n " 
	);
	__asm__ (
		"call -0x1000 +8532592 \n " 
		"label2_sel: \n"
		"lea edx,dword ptr [esp+0x10] \n " 
	);
	__asm__ (
		"call -0x1000 +6733264 \n " 
		"mov eax,dword ptr [esp+0x10] \n " 
		"mov esi,dword ptr [esp+0xC] \n " 
		"push eax \n " 
		"lea edi,dword ptr [esp+0x28] \n " 
	);
	__asm__ (
		"call -0x1000 +6730544 \n " 
		"mov eax,dword ptr [eax] \n " 
		"cmp eax,dword ptr [ebx+0x4A4] \n " 
		"mov dword ptr [esp+0x10],eax \n " 
		"jne continue \n " 
		"exit: \n"
		"pop edi \n " 
		"pop esi \n " 
		"pop ebp \n " 
		"add esp,0x14 \n " 
		"ret 0x4 \n " 
	);
	
}

void SelectionRings()
{
	__asm__
	(
		"push 0xFFFFFFFF \n " 
		"mov eax,dword ptr [fs:0x0] \n " 
		"push 0xBA7B58 \n " 
		"push eax \n " 
		"mov dword ptr [fs:0x0],esp \n " 
		"sub esp,0x2C \n " 
		"push ebx \n " 
		"mov ebx,dword ptr [esp+0x40] \n " 
		"mov eax,dword ptr [ebx+0x8] \n " 
		"push ebp \n " 
		"push esi \n " 
		"push edi \n " 
		"mov edi,ecx \n " 
		"mov ecx,dword ptr [ebx+0x4] \n " 
		"push eax \n " 
		"push ecx \n " 
		"lea eax,dword ptr [esp+0x18] \n " 
	);
	__asm__ (
		"call -0x1000 +8330320 \n " 
		"cmp byte ptr [0x10A640A],0x0 \n " 
		"je exit1 \n " 
		"mov esi,dword ptr [esp+0x50] \n " 
		"mov eax,dword ptr [esi+0x14] \n " 
		"push 0xB \n " 
		"push 0xE3F864 \n " 
		"push eax \n " 
		"push 0x0 \n " 
		"mov ecx,esi \n " 
	);
	__asm__ (
		"call -0x1000 +4241536 \n " 
		"test eax,eax \n " 
		"je exit1 \n " 
		"mov ecx,dword ptr [esi+0x14] \n " 
		"push 0x8 \n " 
		"push 0xE3F8B0 \n " 
		"push ecx \n " 
		"push 0x0 \n " 
		"mov ecx,esi \n " 
	);
	__asm__ (
		"call -0x1000 +4241536 \n " 
		"test eax,eax \n " 
		"je exit1 \n " 
		"mov eax,dword ptr [edi+0x488] \n " 
		"test eax,eax \n " 
		"jl exit1 \n " 
		"mov edx,dword ptr [edi+0x3F0] \n " 
		"mov eax,dword ptr [edx+eax*0x4] \n " 
		"test eax,eax \n " 
		"mov dword ptr [esp+0x10],eax \n " 
		"je exit1 \n " 
		"mov eax,esi \n " 
	);
	__asm__ (
		"call -0x1000 +8317504 \n " 
		"mov ebp,eax \n " 
		"test ebp,ebp \n " 
		"je exit1 \n " 
		"lea esi,dword ptr [esp+0x1C] \n " 
	);
	__asm__ (
		"call -0x1000 +8074688 \n " 
		"mov eax,esi \n " 
		"push eax \n " 
		"mov ebx,edi \n " 
		"mov dword ptr [esp+0x48],0x0 \n " 
	);
	__asm__ (
		"call %[GetSelectedUnits] \n " 
		"lea ebx,dword ptr [esp+0x14] \n " 
		"mov eax,esi \n " 
		:
		: [GetSelectedUnits] "i" (GetSelectedUnits)
		: "memory"
	);
	__asm__ (
		"call -0x1000 +8074736 \n " 
		"mov eax,dword ptr [esp+0x18] \n " 
		"cmp eax,dword ptr [esp+0x20] \n " 
		"je CleanUpExit \n " 
		"LoopStart: \n"
		"mov eax,dword ptr [eax+0x10] \n " 
		"test eax,eax \n " 
		"je ContinueLoop \n " 
		"lea esi,dword ptr [eax-0x8] \n " 
		"test esi,esi \n " 
		"je ContinueLoop \n " 
		"mov ecx,dword ptr [esp+0x10] \n " 
		"cmp ecx,dword ptr [esi+0x120] \n " 
		"jne ContinueLoop \n " 
		"mov edx,dword ptr [esi+0x148] \n " 
		"mov eax,dword ptr [edx+0x1C] \n " 
		"lea edi,dword ptr [esi+0x148] \n " 
		"mov ecx,edi \n " 
		"call eax \n " 
		"test eax,eax \n " 
		"je ContinueLoop \n " 
		"mov edx,dword ptr [edi] \n " 
		"mov eax,dword ptr [edx+0x1C] \n " 
		"mov ecx,edi \n " 
		"call eax \n " 
		"mov edx,dword ptr [esp+0x50] \n " 
		"add edx,0x20 \n " 
	);
	__asm__ (
		"call -0x1000 +5683664 \n " 
		"test eax,eax \n " 
		"jbe ContinueLoop \n " 
		"fld dword ptr [esp+0x54] \n " 
		"mov edx,dword ptr [ebp] \n " 
		"mov edx,dword ptr [edx+0x8] \n " 
		"push ecx \n " 
		"fstp dword ptr [esp] \n " 
		"push esi \n " 
		"lea eax,dword ptr [esp+0x30] \n " 
		"push eax \n " 
		"mov ecx,ebp \n " 
		"call edx \n " 
		"test al,al \n " 
		"je ContinueLoop \n " 
		
		"xor ecx,ecx \n"
		"xor esi,esi \n"
		"mov edx, 0x4 \n"
		"mov eax, dword ptr [ebx+0x4] \n"
		"mov eax, dword ptr ds:[eax+0x10] \n"
		"sub esp, 0x60028 \n"
		"mov dword ptr ds:[0x011FD237], esp \n"
		"LoopOver: \n"
		"cmp dword ptr ss:[esp], esi \n"
		"jne isNotZero \n"
		"mov dword ptr ss:[esp], eax \n"
		"isNotZero: \n"
		"cmp dword ptr ss:[esp], eax \n"
		"je MemWritten \n"
		"sub esp, edx \n"
		"inc ecx \n"
		"jmp LoopOver \n"
		"MemWritten: \n"
		"cmp ecx, 1 \n"
		"jl RegClenUp \n"
		"shl ecx, 2 \n"
		"add esp, ecx \n"
		"RegClenUp: \n"
		"add esp, 0x60028 \n"
		
		
		"mov esi,dword ptr [esp+0x4C] \n " 
		"lea edx,dword ptr [esp+0x28] \n " 
	);
	__asm__ (
		"call -0x1000 +8327952 \n " 
		"ContinueLoop: \n"
		"lea eax,dword ptr [esp+0x14] \n " 
		"push eax \n " 
	);
	__asm__ (
		"call -0x1000 +8328336 \n " 
		"mov eax,dword ptr [esp+0x18] \n " 
		"cmp eax,dword ptr [esp+0x20] \n " 
		"jne LoopStart \n " 
		"CleanUpExit: \n"
		"lea eax,dword ptr [esp+0x1C] \n " 
		"mov dword ptr [esp+0x44],0xFFFFFFFF \n " 
	);
	__asm__ (
		"call -0x1000 +8074544 \n " 
		"exit1: \n"
		"mov ecx,dword ptr [esp+0x3C] \n " 
		"pop edi \n " 
		"pop esi \n " 
		"pop ebp \n " 
		"mov dword ptr [fs:0x0],ecx \n " 
		"pop ebx \n " 
		"add esp,0x38 \n " 
		"ret 0xC \n " 
	);
		
}


void RangeRings()
{
	__asm__
	(
		"push 0xFFFFFFFF \n " 
		"push 0xBBB776 \n " 
		"mov eax,dword ptr [fs:0x0] \n " 
		"push eax \n " 
		"mov dword ptr [fs:0x0],esp \n " 
		"sub esp,0x188 \n " 
		"push ebp \n " 
		"mov ebp,dword ptr [esp+0x19C] \n " 
		"push esi \n " 
		"push edi \n " 
		"mov edi,ecx \n " 
	);
	__asm__ (
		"call -0x1000 +9336624 \n " 
		"xor esi,esi \n " 
		"mov dword ptr [esp+0x18],esi \n " 
		"mov dword ptr [esp+0x1C],esi \n " 
		"mov dword ptr [esp+0x20],esi \n " 
		"mov dword ptr [esp+0x19C],esi \n " 
		"cmp byte ptr [0x10A6414],0x0 \n " 
		"je label1 \n " 
		"mov eax,dword ptr [esp+0x1A8] \n " 
		"push eax \n " 
		"push ebx \n " 
		"lea ecx,dword ptr [esp+0x1C] \n " 
		"push ecx \n " 
		"push ebp \n " 
		"mov ecx,edi \n " 
	);
	__asm__ (
		"call -0x1000 +8322640 \n " 
		"label1: \n"
		"mov eax,dword ptr [ebp+0x14] \n " 
		"cmp eax,esi \n " 
		"je -0x1000 + 8321877 \n " //STARTREGULARFUNC_NO_OVERLOAD
		"mov ecx,dword ptr [ebp+0x18] \n " 
		"sub ecx,eax \n " 
		"mov eax,0x78787879 \n " 
		"imul ecx \n " 
		"sar edx,0x6 \n " 
		"mov eax,edx \n " 
		"shr eax,0x1F \n " 
		"add eax,edx \n " 
		"je -0x1000 + 8321877 \n " //STARTREGULARFUNC_NO_OVERLOAD
		"mov edx,dword ptr [ebx] \n " 
		"mov eax,dword ptr [edx+0x8] \n " 
		"mov ecx,ebx \n " 
		"call eax \n " 
		"mov edx,dword ptr [ebx] \n " 
		"mov eax,dword ptr [edx+0xA4] \n " 
		"mov ecx,ebx \n " 
		"call eax \n " 
		"lea ecx,dword ptr [esp+0x3C] \n " 
		"push ecx \n " 
		"mov edx,eax \n " 
	);
	__asm__ (
		"call -0x1000 +8328144 \n " 
		"mov byte ptr [esp+0x19C],0x1 \n " 
		"mov eax,dword ptr [ebp+0x14] \n " 
		"cmp eax,dword ptr [ebp+0x18] \n " 
		"je label3 \n " 
		"lea esi,dword ptr [eax+0x78] \n " 
		"jmp label4 \n " 
		"lea ecx,dword ptr [ecx] \n " 
		"label4: \n"
		"fld dword ptr [esp+0x1AC] \n " 
		"lea edx,dword ptr [esp+0x14] \n " 
		"push edx \n " 
		"lea eax,dword ptr [esi-0x78] \n " 
		"push eax \n " 
		"push ecx \n " 
		"lea ecx,dword ptr [esp+0x48] \n " 
		"fstp dword ptr [esp] \n " 
		"push ecx \n " 
	);
	__asm__ (
		"call %[GlobalRings] \n " 
		"lea edx,dword ptr [esp+0x14] \n " 
		"push edx \n " 
		"mov edx,dword ptr [esp+0x1AC] \n " 
		"push esi \n " 
		"lea eax,dword ptr [esi-0x30] \n " 
		"push eax \n " 
		"push edx \n " 
		"lea ecx,dword ptr [esi+0x8] \n " 
		"push ebp \n " 
		"mov edx,ebx \n " 
		:
		: [GlobalRings] "i" (GlobalRings)
		: "memory"
	);
	__asm__ (
		"call -0x1000 +8324512 \n " 
		"mov eax,dword ptr [ebp+0x18] \n " 
		"add esi,0x88 \n " 
		"lea ecx,dword ptr [esi-0x78] \n " 
		"cmp ecx,eax \n " 
		"jne label4 \n " 
		"label3: \n"
		"mov byte ptr [esp+0x19C],0x0 \n " 
		
		"xor esi,esi \n"
		"mov edx, dword ptr ds:[0x011FD237] \n"
		"cmp edx, esi \n"
		"je EXITMEMCLEAN \n"
		"mov ecx, dword ptr ds:[0x011FD23B] \n"
		"cmp ecx, esi \n "
		"je EXITMEMCLEAN \n"
		"mov eax,esi \n"
		"mov esi,edi \n"
		"mov edi,edx \n"
		"std \n"
		"rep stosd \n"
		"mov edi,esi \n"
		"cld \n"
		
		"EXITMEMCLEAN: \n"
		"mov eax,dword ptr [esp+0x40] \n " 
		"mov edx,dword ptr [esp+0x3C] \n " 
		"cmp edx,eax \n " 
		"mov esi,eax \n " 
		"je label5 \n " 
		"label6: \n"
		"mov ecx,edx \n " 
		"mov eax,dword ptr [ecx] \n " 
		"add edx,0x8 \n " 
		"test eax,eax \n " 
		"je label7 \n " 
		"cmp dword ptr [eax],ecx \n " 
		"je label8 \n " 
		"label9: \n"
		"mov eax,dword ptr [eax] \n " 
		"add eax,0x4 \n " 
		"cmp dword ptr [eax],ecx \n " 
		"jne label9 \n " 
		"label8: \n"
		"mov ecx,dword ptr [ecx+0x4] \n " 
		"mov dword ptr [eax],ecx \n " 
		"label7: \n"
		"cmp edx,esi \n " 
		"jne label6 \n " 
		"mov edx,dword ptr [esp+0x3C] \n " 
		"label5: \n"
		"cmp edx,dword ptr [esp+0x48] \n " 
		"je label2 \n " 
		"push edx \n " 
	);
	__asm__ (
		"call -0x1000 +11023682 \n " 
		"add esp,0x4 \n " 
		"label2: \n"
		"mov ecx,dword ptr [ebp+0x8] \n " 
		"mov eax,dword ptr [ecx] \n " 
		"cmp eax,ecx \n " 
		"mov dword ptr [esp+0xC],eax \n " 
		"je label10 \n " 
		"label11: \n"
		"fld dword ptr [esp+0x1AC] \n " 
		"push ecx \n " 
		"fstp dword ptr [esp] \n " 
		"lea esi,dword ptr [eax+0x30] \n " 
		"push esi \n " 
		"lea edx,dword ptr [esp+0x1C] \n " 
		"push edx \n " 
		"mov ecx,edi \n " 
	);
	__asm__ (
		"call %[SelectionRings] \n " 
		"lea eax,dword ptr [esp+0x14] \n " 
		"push eax \n " 
		"mov eax,dword ptr [esp+0x1AC] \n " 
		"lea edx,dword ptr [esi+0x78] \n " 
		"push edx \n " 
		"lea ecx,dword ptr [esi+0x80] \n " 
		"add esi,0x58 \n " 
		"push esi \n " 
		"push eax \n " 
		"push ebp \n " 
		"mov edx,ebx \n " 
		:
		: [SelectionRings] "i" (SelectionRings)
		: "memory"		
	);
	__asm__ (
		"call -0x1000 +8324512 \n " 
		"lea edx,dword ptr [esp+0xC] \n " 
	);
	__asm__ (
		"call -0x1000 +8335440 \n " 
		"mov eax,dword ptr [esp+0xC] \n " 
		"cmp eax,dword ptr [ebp+0x8] \n " 
		"jne label11 \n " 
		"label10: \n"
		"mov esi,dword ptr [esp+0x1A8] \n " 
		"fld dword ptr [esp+0x1AC] \n " 
		"push esi \n " 
		"push ecx \n " 
		"fstp dword ptr [esp] \n " 
		"push ebx \n " 
		"lea ecx,dword ptr [esp+0x20] \n " 
		"push ecx \n " 
		"push ebp \n " 
		"mov eax,edi \n " 
	);

	__asm__ (
		"call -0x1000 +8324128 \n " 
		"lea eax,dword ptr [esp+0x14] \n " 
	);
	__asm__ (
		"call -0x1000 +8323520 \n " 
		"movss xmm0,dword ptr [0xDFEC20] \n " 
		"movss xmm1,dword ptr [0xDFEB0C] \n " 
		"lea edx,dword ptr [esp+0x14] \n " 
		"push edx \n " 
		"lea eax,dword ptr [esp+0x10] \n " 
		"push eax \n " 
		"lea ecx,dword ptr [esp+0x34] \n " 
		"push ecx \n " 
		"push esi \n " 
		"movss dword ptr [esp+0x34],xmm0 \n " 
		"movss dword ptr [esp+0x38],xmm1 \n " 
		"movss xmm1,dword ptr [0xE4F714] \n " 
		"movss dword ptr [esp+0x20],xmm0 \n " 
		"movss xmm0,dword ptr [0xE4F8A8] \n " 
		"push ebp \n " 
		"lea ecx,dword ptr [esp+0x38] \n " 
		"mov edx,ebx \n " 
		"movss dword ptr [esp+0x20],xmm1 \n " 
		"movss dword ptr [esp+0x40],xmm0 \n " 
		"movss dword ptr [esp+0x44],xmm0 \n " 
		"movss dword ptr [esp+0x48],xmm0 \n " 
		"movss dword ptr [esp+0x4C],xmm0 \n " 
	);
	__asm__ (
		"call -0x1000 +8324512 \n " 
		"mov eax,dword ptr [esp+0x18] \n " 
		"test eax,eax \n " 
		"je label12 \n " 
		"push eax \n " 
	);
	__asm__ (
		"call -0x1000 +9800288 \n " 
		"add esp,0x4 \n " 
		"label12: \n"
		"mov ecx,dword ptr [esp+0x194] \n " 
		"pop edi \n " 
		"pop esi \n " 
		"mov dword ptr [fs:0x0],ecx \n " 
		"pop ebp \n " 
		"add esp,0x194 \n " 
		"ret 0xC \n " 
	);
	
}