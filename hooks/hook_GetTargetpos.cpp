//HOOK GetTargetPos ROffset = 0x1AD8B0

#include <stdlib.h>
#include "../preprocessor/define.h"
#include "../preprocessor/macro.h"

__asm__
(
    ".equ by_pass_address, 0x005AD8B0 \n"
);

__asm__
(
	" \n " //!; Source: forgedalliance_exxt.exe (base 0x00400000 - 4194304)
	" \n " //!; Internal calls outside selected range (before)
	"_0x4F0A50 =  0x4F0A50 \n " 
	"_0x50B0F0 =  0x50B0F0 \n " 
	"_0x746280 =  0x746280 \n " 
	"_0x8E5870 =  0x8E5870 \n " 
	"_0x678880 =  0x678880 \n " 	
	" \n " //!; Start of selected range: 0x005AD8B0
	"push ebp \n " 
	"mov ebp,esp \n " 
	"and esp,0xFFFFFFC0 \n " 
	"sub esp,0x34 \n " 
	"push ebx \n " 
	"push esi \n " 
	"push edi \n " 
	"mov edi,ecx \n " 
	"cmp byte ptr [edi+0x92],0x0 \n " 
	"mov esi,eax \n " 
	"je L0xABEL_0x005AD93C  \n " //!; => 0x005AD93C
	"lea ebx,dword ptr [edi+0x84] \n " 
	"push 0xF3D21C \n " 
	"mov ecx,ebx \n " 
	"call _0x4F0A50 - by_pass_address \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x005AD93C  \n " //!; => 0x005AD93C
	"fld dword ptr [edi+0x8C] \n " 
	"mov eax,dword ptr [edi+0x10] \n " 
	"mov ecx,dword ptr [eax+0x18] \n " 
	"mov eax,dword ptr [ecx+0x70] \n " 
	"sub esp,0x18 \n " 
	"fstp qword ptr [esp+0x10] \n " 
	"fld dword ptr [edi+0x88] \n " 
	"fstp qword ptr [esp+0x8] \n " 
	"fld dword ptr [ebx] \n " 
	"fstp qword ptr [esp] \n " 
	//"push eax \n " 
	//"mov eax,dword ptr [edi+0x58] \n " 
	//"push 0xE1C430 \n " 
	//"call _0x746280 - by_pass_address \n " 
	"mov ecx,dword ptr [edi+0x58] \n " 
	"add esp,0x18 \n " 
	"push 0xC \n " 
	"push ebx \n " 
	"add ecx,0x50 \n " 
	"call _0x8E5870 - by_pass_address \n " 
	"fld dword ptr [ebx] \n " 
	"fstp dword ptr [esi] \n " 
	"mov eax,esi \n " 
	"fld dword ptr [ebx+0x4] \n " 
	"fstp dword ptr [esi+0x4] \n " 
	"fld dword ptr [ebx+0x8] \n " 
	"fstp dword ptr [esi+0x8] \n " 
	"pop edi \n " 
	"pop esi \n " 
	"pop ebx \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret  \n " 
	"L0xABEL_0x005AD93C: \n " 
	"mov edx,dword ptr [edi+0x10] \n " 
	"mov ebx,dword ptr [edx+0x18] \n " 
	//"movzx ecx,word ptr [edi+0x2A] \n " 
	//"movzx edx,word ptr [edi+0x28] \n " 
	//"mov eax,dword ptr [ebx+0x70] \n " 
	//"push ecx \n " 
	//"push edx \n " 
	//"push eax \n " 
	//"mov eax,dword ptr [edi+0x58] \n " 
	//"push 0xE1C488 \n " 
	//"call _0x746280 - by_pass_address \n " 
	"mov ecx,dword ptr [edi+0x58] \n " 
	//"add esp,0x8 \n " 
	"push 0x4 \n " 
	"lea eax,dword ptr [edi+0x28] \n " 
	"push eax \n " 
	"add ecx,0x50 \n " 
	"call _0x8E5870 - by_pass_address \n " 
	"mov cx,word ptr [edi+0x2A] \n " 
	"mov ax,word ptr [edi+0x28] \n " 
	"mov edx,dword ptr [ebx+0x150] \n " 
	"mov edi,dword ptr [edx+0x8CC] \n " 
	"mov word ptr [esp+0x3E],cx \n " 
	"lea ecx,dword ptr [ebx+0x8] \n " 
	"mov word ptr [esp+0x3C],ax \n " 
	"call _0x678880 - by_pass_address \n " 
	"movzx ecx,byte ptr [eax+0x1] \n " 
	"movzx edx,byte ptr [eax] \n " 
	"movzx eax,byte ptr [eax+0x2] \n " 
	"push ecx \n " 
	"push edx \n " 
	"push eax \n " 
	"lea eax,dword ptr [esp+0x48] \n " 
	"call _0x50B0F0 - by_pass_address \n " 
	"add esp,0xC \n " 
	"pop edi \n " 
	"mov eax,esi \n " 
	"pop esi \n " 
	"pop ebx \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret  \n " 
	" \n " //! 0xFinis of selected range: 0x005AD9B9
	" \n " //!; Internal calls outside selected range (after)
	".align 1024, 0x0 \n"
);

