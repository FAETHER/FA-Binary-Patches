//HOOK Beat ROffset = 0x349F40

#include <stdlib.h>
#include "../preprocessor/define.h"
#include "../preprocessor/macro.h"

__asm__
(
    ".equ by_pass_address, 0x00749F40 \n"
);

__asm__
(
	" \n " //!; Source: forgedalliance_exxt.exe (base 0x00400000 - 4194304)
	" \n " //!; Internal calls outside selected range (before)
	"_0x746280 =  7627392 - by_pass_address \n " 
	//"eax =  0 \n " 
	"_0x408940 =  4229440 - by_pass_address \n " 
	"_0x418A90 =  4295312 - by_pass_address \n " 
	"_0x436290 =  4416144 - by_pass_address \n " 
	"_0x4151E0 =  4280800 - by_pass_address \n " 
	"_0x747460 =  7631968 - by_pass_address \n " 
	"_0x6B6AA0 =  7039648 - by_pass_address \n " 
	"_0x5C87A0 =  6064032 - by_pass_address \n " 
	"_0x409AC0 =  4233920 - by_pass_address \n " 
	"_0x5C3710 =  6043408 - by_pass_address \n " 
	"_0x6A8790 =  6981520 - by_pass_address \n " 
	"_0x678F10 =  6786832 - by_pass_address \n " 
	"_0x4017B0 =  4200368 - by_pass_address \n " 
	"_0x6856C0 =  6837952 - by_pass_address \n " 
	"_0x6ACB20 =  6998816 - by_pass_address \n "
	"_0x912560 =  9512288 - by_pass_address \n " 
	"_0x751370 =  7672688 - by_pass_address \n " 
	"_0x76BC10 =  7781392 - by_pass_address \n " 
	"_0x753AF0 =  7682800 - by_pass_address \n " 
	"_0x74F3E0 =  7664608 - by_pass_address \n " 
	"_0x779710 =  7837456 - by_pass_address \n " 
	"_0x74DDD0 =  7658960 - by_pass_address \n " 
	"_0x74A640 =  7644736 - by_pass_address \n " 
	"_0x90D670 =  9492080 - by_pass_address \n "
	"_0xA82542 =  0xA82542 - by_pass_address \n " 	
	" \n " //!; Start of selected range: 0x00749F40
	"push ebp \n " 
	"mov ebp,esp \n " 
	"and esp,0xFFFFFFF8 \n " 
	"push 0xFFFFFFFF \n " 
	"push 0xBB48B8 \n " 
	//"mov eax,dword ptr [0x0] \n " 
	"push eax \n " 
	//"mov dword ptr [0x0],esp \n " 
	"sub esp,0x3C \n " 
	"push ebx \n " 
	"push ebp \n " 
	"push esi \n " 
	"push edi \n " 
	"mov ebp,ecx \n " 
	//"mov eax,dword ptr [ebp+0x8F8] \n " 
	//"push eax \n " 
	//"push 0xE33854 \n " 
	//"mov eax,ebp \n " 
	//"call _0x746280 \n " 
	"mov eax,dword ptr [ebp+0x8D8] \n " 
	"mov ecx,dword ptr [ebp+0x8C8] \n " 
	"mov edx,dword ptr [ecx] \n " 
	//"add esp,0x8 \n " 
	"push eax \n " 
	"mov eax,dword ptr [edx+0x8] \n " 
	"call eax \n " 
	"mov eax,dword ptr [ebp+0x8D8] \n " 
	"xor ebx,ebx \n " 
	"cmp dword ptr [0x10A63A4],ebx \n " 
	"je L0xABEL_0x00749FB1  \n " //!; => 0x00749FB1
	"mov ecx,dword ptr [eax] \n " 
	"push ebx \n " 
	"push 0x4 \n " 
	"push 0x4B5C70 \n " 
	"push ecx \n " 
	"call _0x912560 \n " 
	"add esp,0x10 \n " 
	"L0xABEL_0x00749FB1: \n " 
	"cmp byte ptr [ebp+0x8DD],bl \n " 
	"jne L0xABEL_0x0074A491  \n " //!; => 0x0074A491
	"cmp dword ptr [ebp+0x8E0],0xFFFFFFFF \n " 
	"je L0xABEL_0x00749FD2  \n " //!; => 0x00749FD2
	"cmp byte ptr [ebp+0x8E4],bl \n " 
	"je L0xABEL_0x0074A491  \n " //!; => 0x0074A491
	"L0xABEL_0x00749FD2: \n " 
	"call _0x408940 \n " 
	"mov eax,dword ptr [eax+0x4] \n " 
	"push 0x1 \n " 
	"mov ecx,eax \n " 
	"call _0x418A90 \n " 
	"add dword ptr [ebp+0x900],0x1 \n " 
	"mov eax,dword ptr [ebp+0x900] \n " 
	"lea edi,dword ptr [ebp+0x900] \n " 
	//"push eax \n " 
	//"push 0xE3425C \n " 
	//"mov eax,ebp \n " 
	//"call _0x746280 \n " 
	//"add esp,0x8 \n " 
	"cmp dword ptr [0x10C76A0],ebx \n " 
	"jne L0xABEL_0x0074A02D  \n " //!; => 0x0074A02D
	"call _0x408940 \n " 
	"push 0xE33D80 \n " 
	"mov ecx,eax \n " 
	"call _0x436290 \n " 
	"xor esi,esi \n " 
	"mov edx,eax \n " 
	"mov dword ptr [0x10C76A0],eax \n " 
	"call _0x4151E0 \n " 
	"L0xABEL_0x0074A02D: \n " 
	"mov edx,dword ptr [0x10C76A0] \n " 
	"mov esi,edi \n " 
	"call _0x751370 \n " 
	"mov ebx,0x10BA530 \n " 
	"mov edi,ebp \n " 
	"call _0x747460 \n " 
	"mov edx,dword ptr [eax] \n " 
	"mov ecx,eax \n " 
	"mov eax,dword ptr [edx+0x8] \n " 
	"call eax \n " 
	"cmp byte ptr [eax],0x0 \n " 
	"je L0xABEL_0x0074A07D  \n " //!; => 0x0074A07D
	"mov ebx,0x10BA404 \n " 
	"call _0x747460 \n " 
	"mov edx,dword ptr [eax] \n " 
	"mov ecx,eax \n " 
	"mov eax,dword ptr [edx+0x8] \n " 
	"call eax \n " 
	"mov ecx,dword ptr [eax] \n " 
	"mov edi,dword ptr [ebp+0x97C] \n " 
	"lea edx,dword ptr [esp+0x10] \n " 
	"push edx \n " 
	"mov dword ptr [esp+0x14],ecx \n " 
	"call _0x76BC10 \n " 
	"L0xABEL_0x0074A07D: \n " 
	"mov eax,ebp \n " 
	"lea edi,dword ptr [esp+0x1C] \n " 
	"call _0x6B6AA0 \n " 
	"mov esi,dword ptr [esp+0x24] \n " 
	"test esi,esi \n " 
	"je L0xABEL_0x0074A0DC  \n " //!; => 0x0074A0DC
	"L0xABEL_0x0074A090: \n " 
	"mov eax,dword ptr [esi] \n " 
	"mov edx,dword ptr [eax+0x28] \n " 
	"mov ecx,esi \n " 
	"call edx \n " 
	"test al,al \n " 
	"jne L0xABEL_0x0074A0B7  \n " //!; => 0x0074A0B7
	"xor eax,eax \n " 
	"mov dword ptr [esi+0x2F0],eax \n " 
	"mov dword ptr [esi+0x2F4],eax \n " 
	"mov dword ptr [esi+0x2E8],eax \n " 
	"mov dword ptr [esi+0x2EC],eax \n " 
	"L0xABEL_0x0074A0B7: \n " 
	"lea edx,dword ptr [esp+0x1C] \n " 
	"call _0x5C87A0 \n " 
	"mov eax,dword ptr [esp+0x1C] \n " 
	"cmp eax,dword ptr [esp+0x20] \n " 
	"je L0xABEL_0x0074A0DC  \n " //!; => 0x0074A0DC
	"mov eax,dword ptr [eax+0x10] \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x0074A0DC  \n " //!; => 0x0074A0DC
	"lea esi,dword ptr [eax-0x8] \n " 
	"test esi,esi \n " 
	"mov dword ptr [esp+0x24],esi \n " 
	"jne L0xABEL_0x0074A090  \n " //!; => 0x0074A090
	"L0xABEL_0x0074A0DC: \n " 
	"xor esi,esi \n " 
	"mov edi,edi \n " 
	"L0xABEL_0x0074A0E0: \n " 
	"mov ecx,dword ptr [ebp+0x910] \n " 
	"test ecx,ecx \n " 
	"je L0xABEL_0x0074A10A  \n " //!; => 0x0074A10A
	"mov eax,dword ptr [ebp+0x914] \n " 
	"sub eax,ecx \n " 
	"sar eax,0x2 \n " 
	"cmp esi,eax \n " 
	"jae L0xABEL_0x0074A10A  \n " //!; => 0x0074A10A
	"mov eax,ecx \n " 
	"mov ecx,dword ptr [eax+esi*0x4] \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov eax,dword ptr [edx+0x3C] \n " 
	"call eax \n " 
	"inc esi \n " 
	"jmp L0xABEL_0x0074A0E0  \n " //!; => 0x0074A0E0
	"L0xABEL_0x0074A10A: \n " 
	"lea ecx,dword ptr [ebp+0x958] \n " 
	"call _0x409AC0 \n " 
	"lea ecx,dword ptr [ebp+0x944] \n " 
	"call _0x409AC0 \n " 
	"lea ecx,dword ptr [ebp+0x930] \n " 
	"call _0x409AC0 \n " 
	"mov eax,ebp \n " 
	"call _0x5C3710 \n " 
	"mov eax,dword ptr [ebp+0x910] \n " 
	"test eax,eax \n " 
	"jne L0xABEL_0x0074A140  \n " //!; => 0x0074A140
	"xor edi,edi \n " 
	"jmp L0xABEL_0x0074A14B  \n " //!; => 0x0074A14B
	"L0xABEL_0x0074A140: \n " 
	"mov edi,dword ptr [ebp+0x914] \n " 
	"sub edi,eax \n " 
	"sar edi,0x2 \n " 
	"L0xABEL_0x0074A14B: \n " 
	"mov eax,dword ptr [ebp+0x900] \n " 
	"xor edx,edx \n " 
	"div edi \n " 
	"xor esi,esi \n " 
	"mov ebx,edx \n " 
	//"lea esp,dword ptr [esp] \n " 
	"L0xABEL_0x0074A160: \n " 
	"mov ecx,dword ptr [ebp+0x910] \n " 
	"test ecx,ecx \n " 
	"je L0xABEL_0x0074A1A0  \n " //!; => 0x0074A1A0
	"mov eax,dword ptr [ebp+0x914] \n " 
	"sub eax,ecx \n " 
	"sar eax,0x2 \n " 
	"cmp esi,eax \n " 
	"jae L0xABEL_0x0074A1A0  \n " //!; => 0x0074A1A0
	"mov ecx,dword ptr [ecx+esi*0x4] \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov eax,dword ptr [edx+0x20] \n " 
	"call eax \n " 
	"cmp esi,ebx \n " 
	"mov edx,dword ptr [eax] \n " 
	"mov ecx,eax \n " 
	"jne L0xABEL_0x0074A196  \n " //!; => 0x0074A196
	"mov eax,dword ptr [edx+0x4] \n " 
	"push edi \n " 
	"call eax \n " 
	"inc esi \n " 
	"jmp L0xABEL_0x0074A160  \n " //!; => 0x0074A160
	"L0xABEL_0x0074A196: \n " 
	"mov eax,dword ptr [edx+0x8] \n " 
	"call eax \n " 
	"inc esi \n " 
	"jmp L0xABEL_0x0074A160  \n " //!; => 0x0074A160
	"L0xABEL_0x0074A1A0: \n " 
	"mov ecx,dword ptr [ebp+0x8C0] \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov eax,dword ptr [edx+0x34] \n " 
	"call eax \n " 
	"mov ecx,dword ptr [ebp+0x980] \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov eax,dword ptr [edx+0x10] \n " 
	"call eax \n " 
	"mov eax,ebp \n " 
	"lea edi,dword ptr [esp+0x1C] \n " 
	"call _0x6B6AA0 \n " 
	"mov esi,dword ptr [esp+0x24] \n " 
	"test esi,esi \n " 
	"je L0xABEL_0x0074A239  \n " //!; => 0x0074A239
	"mov ebx,dword ptr [esp+0x20] \n " 
	"mov edi,dword ptr [esp+0x1C] \n " 
	
	"xor dl, dl \n" // register should be const
	
	"L0xABEL_0x0074A1D5: \n " 
	"cmp byte ptr [esi+0x524],dl \n " 
	"je L0xABEL_0x0074A1E3  \n " //!; => 0x0074A1E3
	"call _0x6A8790 \n " 
	"xor dl, dl \n"
	"L0xABEL_0x0074A1E3: \n " 
	"cmp byte ptr [edi+0x15],dl \n " 
	"jne L0xABEL_0x0074A227  \n " //!; => 0x0074A227
	"mov eax,dword ptr [edi+0x8] \n " 
	"cmp byte ptr [eax+0x15],dl \n " 
	"jne L0xABEL_0x0074A20C  \n " //!; => 0x0074A20C
	"mov edi,eax \n " 
	"mov eax,dword ptr [edi] \n " 
	"cmp byte ptr [eax+0x15],dl \n " 
	"jne L0xABEL_0x0074A227  \n " //!; => 0x0074A227
	"lea esp,dword ptr [esp] \n " 
	"L0xABEL_0x0074A200: \n " 
	"mov edi,eax \n " 
	"mov eax,dword ptr [edi] \n " 
	"cmp byte ptr [eax+0x15],dl \n " 
	"je L0xABEL_0x0074A200  \n " //!; => 0x0074A200
	"jmp L0xABEL_0x0074A227  \n " //!; => 0x0074A227
	"L0xABEL_0x0074A20C: \n " 
	"mov eax,dword ptr [edi+0x4] \n " 
	"cmp byte ptr [eax+0x15],dl \n " 
	"jne L0xABEL_0x0074A225  \n " //!; => 0x0074A225
	"L0xABEL_0x0074A215: \n " 
	"cmp edi,dword ptr [eax+0x8] \n " 
	"jne L0xABEL_0x0074A225  \n " //!; => 0x0074A225
	"mov edi,eax \n " 
	"mov eax,dword ptr [eax+0x4] \n " 
	"cmp byte ptr [eax+0x15],dl \n " 
	"je L0xABEL_0x0074A215  \n " //!; => 0x0074A215
	"L0xABEL_0x0074A225: \n " 
	"mov edi,eax \n " 
	"L0xABEL_0x0074A227: \n " 
	"cmp edi,ebx \n " 
	"je L0xABEL_0x0074A239  \n " //!; => 0x0074A239
	"mov eax,dword ptr [edi+0x10] \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x0074A239  \n " //!; => 0x0074A239
	"lea esi,dword ptr [eax-0x8] \n " 
	"test esi,esi \n " 
	"jne L0xABEL_0x0074A1D5  \n " //!; => 0x0074A1D5
	"L0xABEL_0x0074A239: \n " 
	"mov esi,dword ptr [ebp+0xA60] \n " 
	"lea edi,dword ptr [ebp+0xA5C] \n " 
	"cmp esi,edi \n " 
	"je L0xABEL_0x0074A261  \n " //!; => 0x0074A261
	"L0xABEL_0x0074A249: \n " 
	"test esi,esi \n " 
	"je L0xABEL_0x0074A252  \n " //!; => 0x0074A252
	"lea eax,dword ptr [esi-0x60] \n " 
	"jmp L0xABEL_0x0074A254  \n " //!; => 0x0074A254
	"L0xABEL_0x0074A252: \n " 
	"xor eax,eax \n " 
	"L0xABEL_0x0074A254: \n " 
	"push eax \n " 
	"call _0x678F10 \n " 
	"mov esi,dword ptr [esi+0x4] \n " 
	"cmp esi,edi \n " 
	"jne L0xABEL_0x0074A249  \n " //!; => 0x0074A249
	"L0xABEL_0x0074A261: \n " 
	"lea esi,dword ptr [ebp+0xAA8] \n " 
	"or eax,0xFFFFFFFF \n " 
	"mov edi,esi \n " 
	"call _0x4017B0 \n " 
	"mov ecx,dword ptr [esp+0x1C] \n " 
	"mov dword ptr [esp+0x1C],ecx \n " 
	"mov ecx,dword ptr [esi+0xC] \n " 
	"sub ecx,dword ptr [esi+0x8] \n " 
	"mov dword ptr [esp+0x20],esi \n " 
	"sar ecx,0x2 \n " 
	"add ecx,dword ptr [esi] \n " 
	"mov dword ptr [esp+0x24],eax \n " 
	"shl ecx,0x5 \n " 
	"cmp eax,ecx \n " 
	"je L0xABEL_0x0074A3DB  \n " //!; => 0x0074A3DB
	"jmp L0xABEL_0x0074A2A0  \n " //!; => 0x0074A2A0
	"lea esp,dword ptr [esp] \n " 
	"L0xABEL_0x0074A2A0: \n " 
	"mov edi,dword ptr [ebp+0x984] \n " 
	"mov edx,dword ptr [esp+0x24] \n " 
	"lea ebx,dword ptr [esp+0x10] \n " 
	"lea eax,dword ptr [esp+0x14] \n " 
	"mov ecx,edi \n " 
	"mov dword ptr [esp+0x10],edx \n " 
	"call _0x6856C0 \n " 
	"mov edi,dword ptr [edi+0x4] \n " 
	"mov eax,dword ptr [esp+0x14] \n " 
	"cmp eax,edi \n " 
	"je L0xABEL_0x0074A3B2  \n " //!; => 0x0074A3B2
	"mov ebx,dword ptr [eax+0x10] \n " 
	"test ebx,ebx \n " 
	"mov dword ptr [esp+0x10],ebx \n " 
	"je L0xABEL_0x0074A3B2  \n " //!; => 0x0074A3B2
	"mov eax,dword ptr [ebx] \n " 
	"mov edx,dword ptr [eax+0x10] \n " 
	"mov ecx,ebx \n " 
	"call edx \n " 
	"test eax,eax \n " 
	"je L0xABEL_0x0074A3B2  \n " //!; => 0x0074A3B2
	"lea eax,dword ptr [esp+0x38] \n " 
	"mov ecx,eax \n " 
	"lea edx,dword ptr [esp+0x40] \n " 
	"mov dword ptr [esp+0x28],eax \n " 
	"mov dword ptr [esp+0x2C],ecx \n " 
	"mov dword ptr [esp+0x30],edx \n " 
	"mov dword ptr [esp+0x34],eax \n " 
	"mov dword ptr [esp+0x40],0xF0000000 \n " 
	"lea edi,dword ptr [ebp+0xA28] \n " 
	"mov dword ptr [esp+0x54],0x0 \n " 
	"mov ecx,dword ptr [edi+0x4] \n " 
	"test ecx,ecx \n " 
	"jne L0xABEL_0x0074A327  \n " //!; => 0x0074A327
	"xor edx,edx \n " 
	"jmp L0xABEL_0x0074A32F  \n " //!; => 0x0074A32F
	"L0xABEL_0x0074A327: \n " 
	"mov edx,dword ptr [edi+0x8] \n " 
	"sub edx,ecx \n " 
	"sar edx,0x5 \n " 
	"L0xABEL_0x0074A32F: \n " 
	"test ecx,ecx \n " 
	"je L0xABEL_0x0074A36F  \n " //!; => 0x0074A36F
	"mov eax,dword ptr [edi+0xC] \n " 
	"sub eax,ecx \n " 
	"sar eax,0x5 \n " 
	"cmp edx,eax \n " 
	"jae L0xABEL_0x0074A36F  \n " //!; => 0x0074A36F
	"mov ebx,dword ptr [edi+0x8] \n " 
	"mov byte ptr [esp+0x18],0x0 \n " 
	"mov ecx,dword ptr [esp+0x18] \n " 
	"mov edx,dword ptr [esp+0x18] \n " 
	"push ecx \n " 
	"push edx \n " 
	"push ebx \n " 
	"lea ecx,dword ptr [esp+0x34] \n " 
	"mov edx,0x1 \n " 
	"call _0x753AF0 \n " 
	"add esp,0xC \n " 
	"add ebx,0x20 \n " 
	"mov dword ptr [edi+0x8],ebx \n " 
	"mov ebx,dword ptr [esp+0x10] \n " 
	"jmp L0xABEL_0x0074A37D  \n " //!; => 0x0074A37D
	"L0xABEL_0x0074A36F: \n " 
	"mov eax,dword ptr [edi+0x8] \n " 
	"push eax \n " 
	"push edi \n " 
	"lea ecx,dword ptr [esp+0x30] \n " 
	"call _0x74F3E0 \n " 
	"L0xABEL_0x0074A37D: \n " 
	"mov dword ptr [esp+0x54],0xFFFFFFFF \n " 
	"mov eax,dword ptr [esp+0x28] \n " 
	"cmp eax,dword ptr [esp+0x34] \n " 
	"je L0xABEL_0x0074A398  \n " //!; => 0x0074A398
	"push eax \n " 
	"call _0xA82542 \n " 
	"add esp,0x4 \n " 
	"L0xABEL_0x0074A398: \n " 
	"mov eax,dword ptr [ebp+0xA30] \n " 
	"lea edi,dword ptr [eax-0x20] \n " 
	"mov eax,dword ptr [ebx] \n " 
	"mov edx,dword ptr [eax+0x10] \n " 
	"mov ecx,ebx \n " 
	"call edx \n " 
	"push eax \n " 
	"mov eax,edi \n " 
	"call _0x6ACB20 \n " 
	"L0xABEL_0x0074A3B2: \n " 
	"mov eax,dword ptr [esp+0x24] \n " 
	"mov edi,dword ptr [esp+0x20] \n " 
	"call _0x4017B0 \n " 
	"mov ecx,eax \n " 
	"mov eax,dword ptr [esi+0xC] \n " 
	"sub eax,dword ptr [esi+0x8] \n " 
	"mov dword ptr [esp+0x24],ecx \n " 
	"sar eax,0x2 \n " 
	"add eax,dword ptr [esi] \n " 
	"shl eax,0x5 \n " 
	"cmp ecx,eax \n " 
	"jne L0xABEL_0x0074A2A0  \n " //!; => 0x0074A2A0
	"L0xABEL_0x0074A3DB: \n " 
	"mov eax,dword ptr [ebp+0x96C] \n " 
	"mov dword ptr [ebp+0x974],eax \n " 
	"mov edi,dword ptr [ebp+0x970] \n " 
	"cmp edi,dword ptr [ebp+0x978] \n " 
	"je L0xABEL_0x0074A43F  \n " //!; => 0x0074A43F
	"test edi,edi \n " 
	"je L0xABEL_0x0074A405  \n " //!; => 0x0074A405
	"lea ecx,dword ptr [edi+0x4] \n " 
	"mov edx,0x1 \n " 
	"lock xadd dword ptr [ecx],edx \n " 
	"L0xABEL_0x0074A405: \n " 
	"mov esi,dword ptr [ebp+0x978] \n " 
	"test esi,esi \n " 
	"je L0xABEL_0x0074A439  \n " //!; => 0x0074A439
	"lea eax,dword ptr [esi+0x4] \n " 
	"or ecx,0xFFFFFFFF \n " 
	"lock xadd dword ptr [eax],ecx \n " 
	"jne L0xABEL_0x0074A439  \n " //!; => 0x0074A439
	"mov edx,dword ptr [esi] \n " 
	"mov eax,dword ptr [edx+0x4] \n " 
	"mov ecx,esi \n " 
	"call eax \n " 
	"lea ecx,dword ptr [esi+0x8] \n " 
	"or edx,0xFFFFFFFF \n " 
	"lock xadd dword ptr [ecx],edx \n " 
	"jne L0xABEL_0x0074A439  \n " //!; => 0x0074A439
	"mov eax,dword ptr [esi] \n " 
	"mov edx,dword ptr [eax+0x8] \n " 
	"mov ecx,esi \n " 
	"call edx \n " 
	"L0xABEL_0x0074A439: \n " 
	"mov dword ptr [ebp+0x978],edi \n " 
	"L0xABEL_0x0074A43F: \n " 
	"xor eax,eax \n " 
	"mov dword ptr [ebp+0x96C],eax \n " 
	"mov esi,dword ptr [ebp+0x970] \n " 
	"cmp esi,eax \n " 
	"mov dword ptr [ebp+0x970],eax \n " 
	"je L0xABEL_0x0074A481  \n " //!; => 0x0074A481
	"lea eax,dword ptr [esi+0x4] \n " 
	"or ecx,0xFFFFFFFF \n " 
	"lock xadd dword ptr [eax],ecx \n " 
	"jne L0xABEL_0x0074A481  \n " //!; => 0x0074A481
	"mov edx,dword ptr [esi] \n " 
	"mov eax,dword ptr [edx+0x4] \n " 
	"mov ecx,esi \n " 
	"call eax \n " 
	"lea ecx,dword ptr [esi+0x8] \n " 
	"or edx,0xFFFFFFFF \n " 
	"lock xadd dword ptr [ecx],edx \n " 
	"jne L0xABEL_0x0074A481  \n " //!; => 0x0074A481
	"mov eax,dword ptr [esi] \n " 
	"mov edx,dword ptr [eax+0x8] \n " 
	"mov ecx,esi \n " 
	"call edx \n " 
	"L0xABEL_0x0074A481: \n " 
	"mov byte ptr [ebp+0x8E5],0x1 \n " 
	"mov byte ptr [ebp+0x8E4],0x0 \n " 
	"xor ebx,ebx \n " 
	"L0xABEL_0x0074A491: \n " 
	"cmp dword ptr [ebp+0xA58],ebx \n " 
	"je L0xABEL_0x0074A516  \n " //!; => 0x0074A516
	"lea esp,dword ptr [esp] \n " 
	"L0xABEL_0x0074A4A0: \n " 
	"mov ecx,dword ptr [ebp+0xA54] \n " 
	"mov edx,dword ptr [ebp+0xA50] \n " 
	"mov eax,ecx \n " 
	"shr eax,0x2 \n " 
	"and ecx,0x3 \n " 
	"cmp edx,eax \n " 
	"ja L0xABEL_0x0074A4BA  \n " //!; => 0x0074A4BA
	"sub eax,edx \n " 
	"L0xABEL_0x0074A4BA: \n " 
	"mov edx,dword ptr [ebp+0xA4C] \n " 
	"mov eax,dword ptr [edx+eax*0x4] \n " 
	"mov ecx,dword ptr [eax+ecx*0x4] \n " 
	"mov eax,dword ptr [ebp+0xA58] \n " 
	"cmp eax,ebx \n " 
	"je L0xABEL_0x0074A504  \n " //!; => 0x0074A504
	"mov esi,dword ptr [ebp+0xA50] \n " 
	"add dword ptr [ebp+0xA54],0x1 \n " 
	"mov edx,dword ptr [ebp+0xA54] \n " 
	"add esi,esi \n " 
	"add esi,esi \n " 
	"cmp esi,edx \n " 
	"ja L0xABEL_0x0074A4F1  \n " //!; => 0x0074A4F1
	"mov dword ptr [ebp+0xA54],ebx \n " 
	"L0xABEL_0x0074A4F1: \n " 
	"add eax,0xFFFFFFFF \n " 
	"cmp eax,ebx \n " 
	"mov dword ptr [ebp+0xA58],eax \n " 
	"jne L0xABEL_0x0074A504  \n " //!; => 0x0074A504
	"mov dword ptr [ebp+0xA54],ebx \n " 
	"L0xABEL_0x0074A504: \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov eax,dword ptr [edx+0x80] \n " 
	"call eax \n " 
	"cmp dword ptr [ebp+0xA58],ebx \n " 
	"jne L0xABEL_0x0074A4A0  \n " //!; => 0x0074A4A0
	"L0xABEL_0x0074A516: \n " 
	"mov ecx,dword ptr [ebp+0x8C0] \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov eax,dword ptr [edx+0x3C] \n " 
	"call eax \n " 
	"mov ecx,dword ptr [ebp+0x99C] \n " 
	"push ecx \n " 
	"call _0x779710 \n " 
	"mov edx,dword ptr [ebp+0x9AC] \n " 
	"cmp edx,ebx \n " 
	"mov edi,dword ptr [ebp+0x8F8] \n " 
	"mov esi,dword ptr [0x10BA5EC] \n " 
	"lea ecx,dword ptr [ebp+0x9A8] \n " 
	"je L0xABEL_0x0074A557  \n " //!; => 0x0074A557
	"mov eax,dword ptr [ecx+0x8] \n " 
	"sub eax,edx \n " 
	"sar eax,0x2 \n " 
	"cmp esi,eax \n " 
	"jb L0xABEL_0x0074A561  \n " //!; => 0x0074A561
	"L0xABEL_0x0074A557: \n " 
	"mov eax,dword ptr [0x10A63E0] \n " 
	"call _0x74DDD0 \n " 
	"L0xABEL_0x0074A561: \n " 
	"mov edx,dword ptr [ebp+0x9AC] \n " 
	"mov eax,dword ptr [edx+esi*0x4] \n " 
	"cmp eax,ebx \n " 
	"jne L0xABEL_0x0074A586  \n " //!; => 0x0074A586
	"mov eax,dword ptr [0x10BA5E0] \n " 
	"mov edx,dword ptr [eax+0x8] \n " 
	"mov ecx,0x10BA5E0 \n " 
	"call edx \n " 
	"mov ecx,dword ptr [ebp+0x9AC] \n " 
	"mov dword ptr [ecx+esi*0x4],eax \n " 
	"L0xABEL_0x0074A586: \n " 
	"mov edx,dword ptr [eax] \n " 
	"mov ecx,eax \n " 
	"mov eax,dword ptr [edx+0x8] \n " 
	"call eax \n " 
	"mov ecx,eax \n " 
	"xor edx,edx \n " 
	"mov eax,edi \n " 
	"div dword ptr [ecx] \n " 
	"test edx,edx \n " 
	"jne L0xABEL_0x0074A5A2  \n " //!; => 0x0074A5A2
	"mov eax,ebp \n " 
	"call _0x74A640 \n " 
	"L0xABEL_0x0074A5A2: \n " 
	"mov esi,dword ptr [ebp+0x9A4] \n " 
	"lea edi,dword ptr [ebp+0x9A0] \n " 
	"cmp esi,edi \n " 
	"je L0xABEL_0x0074A5CC  \n " //!; => 0x0074A5CC
	"L0xABEL_0x0074A5B2: \n " 
	"cmp esi,ebx \n " 
	"je L0xABEL_0x0074A5BB  \n " //!; => 0x0074A5BB
	"lea ecx,dword ptr [esi-0x4] \n " 
	"jmp L0xABEL_0x0074A5BD  \n " //!; => 0x0074A5BD
	"L0xABEL_0x0074A5BB: \n " 
	"xor ecx,ecx \n " 
	"L0xABEL_0x0074A5BD: \n " 
	"mov edx,dword ptr [ecx] \n " 
	"mov eax,dword ptr [edx+0xC] \n " 
	"push ebp \n " 
	"call eax \n " 
	"mov esi,dword ptr [esi+0x4] \n " 
	"cmp esi,edi \n " 
	"jne L0xABEL_0x0074A5B2  \n " //!; => 0x0074A5B2
	"L0xABEL_0x0074A5CC: \n " 
	"mov ecx,dword ptr [ebp+0x8D8] \n " 
	"cmp ecx,ebx \n " 
	"je L0xABEL_0x0074A5F5  \n " //!; => 0x0074A5F5
	"mov eax,dword ptr [ebp+0x900] \n " 
	"xor edx,edx \n " 
	"mov esi,0x46 \n " 
	"div esi \n " 
	"test edx,edx \n " 
	"jne L0xABEL_0x0074A5F5  \n " //!; => 0x0074A5F5
	"mov ecx,dword ptr [ecx] \n " 
	"push ebx \n " 
	"push ecx \n " 
	"call _0x90D670 \n " 
	"add esp,0x8 \n " 
	"L0xABEL_0x0074A5F5: \n " 
	"mov ecx,dword ptr [esp+0x4C] \n " 
	"pop edi \n " 
	"mov byte ptr [ebp+0x8FC],0x1 \n " 
	//"mov dword ptr [0x0],ecx \n " 
	"pop esi \n " 
	"pop ebp \n " 
	"pop ebx \n " 
	"mov esp,ebp \n " 
	"pop ebp \n " 
	"ret 0x4 \n " 
	"mov ecx, dword ptr ss:[esp+0x4C] \n"
	" \n " //! 0xFinis of selected range: 0x0074A610
	" \n " //!; Internal calls outside selected range (after)
	".align 8192, 0x0 \n"
);